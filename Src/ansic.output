Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | CONSTANT
    3                   | STRING_LITERAL
    4                   | '(' expression ')'

    5 postfix_expression: primary_expression
    6                   | postfix_expression '[' expression ']'
    7                   | postfix_expression '(' ')'
    8                   | postfix_expression '(' argument_expression_list ')'
    9                   | postfix_expression '.' IDENTIFIER
   10                   | postfix_expression PTR_OP IDENTIFIER
   11                   | postfix_expression INC_OP
   12                   | postfix_expression DEC_OP

   13 argument_expression_list: assignment_expression
   14                         | argument_expression_list ',' assignment_expression

   15 unary_expression: postfix_expression
   16                 | INC_OP unary_expression
   17                 | DEC_OP unary_expression
   18                 | unary_operator cast_expression
   19                 | SIZEOF unary_expression
   20                 | SIZEOF '(' type_name ')'

   21 unary_operator: '&'
   22               | '*'
   23               | '+'
   24               | '-'
   25               | '~'
   26               | '!'

   27 cast_expression: unary_expression
   28                | '(' type_name ')' cast_expression

   29 multiplicative_expression: cast_expression
   30                          | multiplicative_expression '*' cast_expression
   31                          | multiplicative_expression '/' cast_expression
   32                          | multiplicative_expression '%' cast_expression

   33 additive_expression: multiplicative_expression
   34                    | additive_expression '+' multiplicative_expression
   35                    | additive_expression '-' multiplicative_expression

   36 shift_expression: additive_expression
   37                 | shift_expression LEFT_OP additive_expression
   38                 | shift_expression RIGHT_OP additive_expression

   39 relational_expression: shift_expression
   40                      | relational_expression '<' shift_expression
   41                      | relational_expression '>' shift_expression
   42                      | relational_expression LE_OP shift_expression
   43                      | relational_expression GE_OP shift_expression

   44 equality_expression: relational_expression
   45                    | equality_expression EQ_OP relational_expression
   46                    | equality_expression NE_OP relational_expression

   47 and_expression: equality_expression
   48               | and_expression '&' equality_expression

   49 exclusive_or_expression: and_expression
   50                        | exclusive_or_expression '^' and_expression

   51 inclusive_or_expression: exclusive_or_expression
   52                        | inclusive_or_expression '|' exclusive_or_expression

   53 N: ε

   54 logical_and_expression: inclusive_or_expression
   55                       | logical_and_expression AND_OP N inclusive_or_expression

   56 logical_or_expression: logical_and_expression
   57                      | logical_or_expression OR_OP N logical_and_expression

   58 M: ε

   59 conditional_expression: logical_or_expression

   60 $@1: ε

   61 $@2: ε

   62 conditional_expression: logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression

   63 assignment_expression: conditional_expression
   64                      | unary_expression assignment_operator assignment_expression

   65 assignment_operator: '='
   66                    | MUL_ASSIGN
   67                    | DIV_ASSIGN
   68                    | MOD_ASSIGN
   69                    | ADD_ASSIGN
   70                    | SUB_ASSIGN
   71                    | LEFT_ASSIGN
   72                    | RIGHT_ASSIGN
   73                    | AND_ASSIGN
   74                    | XOR_ASSIGN
   75                    | OR_ASSIGN

   76 expression: assignment_expression
   77           | expression ',' assignment_expression

   78 constant_expression: conditional_expression

   79 declaration: declaration_specifiers ';'
   80            | declaration_specifiers init_declarator_list ';'

   81 declaration_specifiers: storage_class_specifier
   82                       | storage_class_specifier declaration_specifiers
   83                       | type_specifier
   84                       | type_specifier declaration_specifiers
   85                       | type_qualifier
   86                       | type_qualifier declaration_specifiers

   87 init_declarator_list: init_declarator
   88                     | init_declarator_list ',' init_declarator

   89 init_declarator: declarator
   90                | declarator '=' initializer

   91 storage_class_specifier: TYPEDEF
   92                        | EXTERN
   93                        | STATIC
   94                        | AUTO
   95                        | REGISTER

   96 type_specifier: VOID
   97               | CHAR
   98               | SHORT
   99               | INT
  100               | LONG
  101               | FLOAT
  102               | DOUBLE
  103               | SIGNED
  104               | UNSIGNED
  105               | struct_or_union_specifier
  106               | enum_specifier
  107               | TYPE_NAME

  108 struct_or_union_specifier: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | struct_or_union '{' struct_declaration_list '}'
  110                          | struct_or_union IDENTIFIER

  111 struct_or_union: STRUCT
  112                | UNION

  113 struct_declaration_list: struct_declaration
  114                        | struct_declaration_list struct_declaration

  115 struct_declaration: specifier_qualifier_list struct_declarator_list ';'

  116 specifier_qualifier_list: type_specifier specifier_qualifier_list
  117                         | type_specifier
  118                         | type_qualifier specifier_qualifier_list
  119                         | type_qualifier

  120 struct_declarator_list: struct_declarator
  121                       | struct_declarator_list ',' struct_declarator

  122 struct_declarator: declarator
  123                  | ':' constant_expression
  124                  | declarator ':' constant_expression

  125 enum_specifier: ENUM '{' enumerator_list '}'
  126               | ENUM IDENTIFIER '{' enumerator_list '}'
  127               | ENUM IDENTIFIER

  128 enumerator_list: enumerator
  129                | enumerator_list ',' enumerator

  130 enumerator: IDENTIFIER
  131           | IDENTIFIER '=' constant_expression

  132 type_qualifier: CONST
  133               | VOLATILE

  134 declarator: pointer direct_declarator
  135           | direct_declarator

  136 direct_declarator: IDENTIFIER
  137                  | '(' declarator ')'
  138                  | direct_declarator '[' constant_expression ']'
  139                  | direct_declarator '[' ']'
  140                  | direct_declarator '(' parameter_type_list ')'
  141                  | direct_declarator '(' identifier_list ')'
  142                  | direct_declarator '(' ')'

  143 pointer: '*'
  144        | '*' type_qualifier_list
  145        | '*' pointer
  146        | '*' type_qualifier_list pointer

  147 type_qualifier_list: type_qualifier
  148                    | type_qualifier_list type_qualifier

  149 parameter_type_list: parameter_list
  150                    | parameter_list ',' ELLIPSIS

  151 parameter_list: parameter_declaration
  152               | parameter_list ',' parameter_declaration

  153 parameter_declaration: declaration_specifiers declarator
  154                      | declaration_specifiers abstract_declarator
  155                      | declaration_specifiers

  156 identifier_list: IDENTIFIER
  157                | identifier_list ',' IDENTIFIER

  158 type_name: specifier_qualifier_list
  159          | specifier_qualifier_list abstract_declarator

  160 abstract_declarator: pointer
  161                    | direct_abstract_declarator
  162                    | pointer direct_abstract_declarator

  163 direct_abstract_declarator: '(' abstract_declarator ')'
  164                           | '[' ']'
  165                           | '[' constant_expression ']'
  166                           | direct_abstract_declarator '[' ']'
  167                           | direct_abstract_declarator '[' constant_expression ']'
  168                           | '(' ')'
  169                           | '(' parameter_type_list ')'
  170                           | direct_abstract_declarator '(' ')'
  171                           | direct_abstract_declarator '(' parameter_type_list ')'

  172 initializer: assignment_expression
  173            | '{' initializer_list '}'
  174            | '{' initializer_list ',' '}'

  175 initializer_list: initializer
  176                 | initializer_list ',' initializer

  177 P: ε

  178 statement: labeled_statement

  179 $@3: ε

  180 statement: P $@3 compound_statement
  181          | expression_statement
  182          | selection_statement
  183          | iteration_statement
  184          | jump_statement

  185 labeled_statement: IDENTIFIER ':' N statement
  186                  | CASE constant_expression ':' N statement
  187                  | DEFAULT ':' N statement

  188 compound_statement: '{' '}'
  189                   | '{' statement_list '}'
  190                   | '{' declaration_list '}'
  191                   | '{' declaration_list statement_list '}'

  192 declaration_list: declaration
  193                 | declaration_list declaration

  194 statement_list: statement
  195               | statement_list N statement

  196 expression_statement: ';'
  197                     | expression ';'

  198 logic_expression: expression

  199 selection_statement: IF '(' logic_expression ')' N statement
  200                    | IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | SWITCH '(' expression ')' M statement

  202 logic_expression_statement: expression_statement

  203 iteration_statement: WHILE N '(' logic_expression ')' N statement
  204                    | DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | FOR '(' expression_statement N expression_statement N expression ')' M N statement

  207 jump_statement: GOTO IDENTIFIER ';'
  208               | CONTINUE ';'
  209               | BREAK ';'
  210               | RETURN ';'
  211               | RETURN expression ';'

  212 translation_unit: external_declaration
  213                 | translation_unit external_declaration

  214 external_declaration: function_definition
  215                     | declaration

  216 function_definition: declaration_specifiers declarator declaration_list compound_statement

  217 $@4: ε

  218 function_definition: declaration_specifiers declarator $@4 compound_statement
  219                    | declarator declaration_list compound_statement

  220 $@5: ε

  221 function_definition: declarator $@5 compound_statement


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 26
    '%' (37) 32
    '&' (38) 21 48
    '(' (40) 4 7 8 20 28 137 140 141 142 163 168 169 170 171 199 200 201 203 204 205 206
    ')' (41) 4 7 8 20 28 137 140 141 142 163 168 169 170 171 199 200 201 203 204 205 206
    '*' (42) 22 30 143 144 145 146
    '+' (43) 23 34
    ',' (44) 14 77 88 121 129 150 152 157 174 176
    '-' (45) 24 35
    '.' (46) 9
    '/' (47) 31
    ':' (58) 62 123 124 185 186 187
    ';' (59) 79 80 115 196 197 204 207 208 209 210 211
    '<' (60) 40
    '=' (61) 65 90 131
    '>' (62) 41
    '?' (63) 62
    '[' (91) 6 138 139 164 165 166 167
    ']' (93) 6 138 139 164 165 166 167
    '^' (94) 50
    '{' (123) 108 109 125 126 173 174 188 189 190 191
    '|' (124) 52
    '}' (125) 108 109 125 126 173 174 188 189 190 191
    '~' (126) 25
    error (256)
    IDENTIFIER <name> (258) 1 9 10 108 110 126 127 130 131 136 156 157 185 207
    CONSTANT <name> (259) 2
    STRING_LITERAL <sval> (260) 3
    SIZEOF <sval> (261) 19 20
    PTR_OP (262) 10
    INC_OP (263) 11 16
    DEC_OP (264) 12 17
    LEFT_OP (265) 37
    RIGHT_OP (266) 38
    LE_OP (267) 42
    GE_OP (268) 43
    EQ_OP (269) 45
    NE_OP (270) 46
    AND_OP (271) 55
    OR_OP (272) 57
    MUL_ASSIGN (273) 66
    DIV_ASSIGN (274) 67
    MOD_ASSIGN (275) 68
    ADD_ASSIGN (276) 69
    SUB_ASSIGN (277) 70
    LEFT_ASSIGN (278) 71
    RIGHT_ASSIGN (279) 72
    AND_ASSIGN (280) 73
    XOR_ASSIGN (281) 74
    OR_ASSIGN (282) 75
    TYPE_NAME (283) 107
    TYPEDEF (284) 91
    EXTERN (285) 92
    STATIC (286) 93
    AUTO (287) 94
    REGISTER (288) 95
    CHAR (289) 97
    SHORT (290) 98
    INT (291) 99
    LONG (292) 100
    SIGNED (293) 103
    UNSIGNED (294) 104
    FLOAT (295) 101
    DOUBLE (296) 102
    CONST (297) 132
    VOLATILE (298) 133
    VOID (299) 96
    STRUCT (300) 111
    UNION (301) 112
    ENUM (302) 125 126 127
    ELLIPSIS (303) 150
    CASE (304) 186
    DEFAULT (305) 187
    IF (306) 199 200
    ELSE (307) 200
    SWITCH (308) 201
    WHILE (309) 203 204
    DO (310) 204
    FOR (311) 205 206
    GOTO (312) 207
    CONTINUE (313) 208
    BREAK (314) 209
    RETURN (315) 210 211
    NOELSE (316)


Nonterminals, with rules where they appear

    $accept (86)
        on left: 0
    primary_expression <sym> (87)
        on left: 1 2 3 4
        on right: 5
    postfix_expression <sym> (88)
        on left: 5 6 7 8 9 10 11 12
        on right: 6 7 8 9 10 11 12 15
    argument_expression_list <sym> (89)
        on left: 13 14
        on right: 8 14
    unary_expression <sym> (90)
        on left: 15 16 17 18 19 20
        on right: 16 17 19 27 64
    unary_operator <op> (91)
        on left: 21 22 23 24 25 26
        on right: 18
    cast_expression <sym> (92)
        on left: 27 28
        on right: 18 28 29 30 31 32
    multiplicative_expression <sym> (93)
        on left: 29 30 31 32
        on right: 30 31 32 33 34 35
    additive_expression <sym> (94)
        on left: 33 34 35
        on right: 34 35 36 37 38
    shift_expression <sym> (95)
        on left: 36 37 38
        on right: 37 38 39 40 41 42 43
    relational_expression <sym> (96)
        on left: 39 40 41 42 43
        on right: 40 41 42 43 44 45 46
    equality_expression <sym> (97)
        on left: 44 45 46
        on right: 45 46 47 48
    and_expression <sym> (98)
        on left: 47 48
        on right: 48 49 50
    exclusive_or_expression <sym> (99)
        on left: 49 50
        on right: 50 51 52
    inclusive_or_expression <sym> (100)
        on left: 51 52
        on right: 52 54 55
    N <instr> (101)
        on left: 53
        on right: 55 57 62 185 186 187 195 199 200 203 204 205 206
    logical_and_expression <sym> (102)
        on left: 54 55
        on right: 55 56 57
    logical_or_expression <sym> (103)
        on left: 56 57
        on right: 57 59 62
    M <lists> (104)
        on left: 58
        on right: 62 200 201 206
    conditional_expression <sym> (105)
        on left: 59 62
        on right: 62 63 78
    $@1 (106)
        on left: 60
        on right: 62
    $@2 (107)
        on left: 61
        on right: 62
    assignment_expression <sym> (108)
        on left: 63 64
        on right: 13 14 64 76 77 172
    assignment_operator <asop> (109)
        on left: 65 66 67 68 69 70 71 72 73 74 75
        on right: 64
    expression <sym> (110)
        on left: 76 77
        on right: 4 6 62 77 197 198 201 206 211
    constant_expression <sym> (111)
        on left: 78
        on right: 123 124 131 138 165 167 186
    declaration (112)
        on left: 79 80
        on right: 192 193 215
    declaration_specifiers <splist> (113)
        on left: 81 82 83 84 85 86
        on right: 79 80 82 84 86 153 154 155 216 218
    init_declarator_list <idlist> (114)
        on left: 87 88
        on right: 80 88
    init_declarator <id_data> (115)
        on left: 89 90
        on right: 87 88
    storage_class_specifier <scsp> (116)
        on left: 91 92 93 94 95
        on right: 81 82
    type_specifier <typesp> (117)
        on left: 96 97 98 99 100 101 102 103 104 105 106 107
        on right: 83 84 116 117
    struct_or_union_specifier (118)
        on left: 108 109 110
        on right: 105
    struct_or_union (119)
        on left: 111 112
        on right: 108 109 110
    struct_declaration_list (120)
        on left: 113 114
        on right: 108 109 114
    struct_declaration (121)
        on left: 115
        on right: 113 114
    specifier_qualifier_list <sqlist> (122)
        on left: 116 117 118 119
        on right: 115 116 118 158 159
    struct_declarator_list (123)
        on left: 120 121
        on right: 115 121
    struct_declarator (124)
        on left: 122 123 124
        on right: 120 121
    enum_specifier (125)
        on left: 125 126 127
        on right: 106
    enumerator_list (126)
        on left: 128 129
        on right: 125 126 129
    enumerator (127)
        on left: 130 131
        on right: 128 129
    type_qualifier <typeq> (128)
        on left: 132 133
        on right: 85 86 118 119 147 148
    declarator <id_data> (129)
        on left: 134 135
        on right: 89 90 122 124 137 153 216 218 219 221
    direct_declarator <id_data> (130)
        on left: 136 137 138 139 140 141 142
        on right: 134 135 138 139 140 141 142
    pointer <pstruct> (131)
        on left: 143 144 145 146
        on right: 134 145 146 160 162
    type_qualifier_list <splist> (132)
        on left: 147 148
        on right: 144 146 148
    parameter_type_list <idlist> (133)
        on left: 149 150
        on right: 140 169 171
    parameter_list <idlist> (134)
        on left: 151 152
        on right: 149 150 152
    parameter_declaration <sym> (135)
        on left: 153 154 155
        on right: 151 152
    identifier_list <symlist> (136)
        on left: 156 157
        on right: 141 157
    type_name <typ> (137)
        on left: 158 159
        on right: 20 28
    abstract_declarator (138)
        on left: 160 161 162
        on right: 154 159 163
    direct_abstract_declarator (139)
        on left: 163 164 165 166 167 168 169 170 171
        on right: 161 162 166 167 170 171
    initializer <sym> (140)
        on left: 172 173 174
        on right: 90 175 176
    initializer_list (141)
        on left: 175 176
        on right: 173 174 176
    P (142)
        on left: 177
        on right: 180
    statement <lists> (143)
        on left: 178 180 181 182 183 184
        on right: 185 186 187 194 195 199 200 201 203 204 205 206
    $@3 (144)
        on left: 179
        on right: 180
    labeled_statement <lists> (145)
        on left: 185 186 187
        on right: 178
    compound_statement <lists> (146)
        on left: 188 189 190 191
        on right: 180 216 218 219 221
    declaration_list (147)
        on left: 192 193
        on right: 190 191 193 216 219
    statement_list <lists> (148)
        on left: 194 195
        on right: 189 191 195
    expression_statement <sym> (149)
        on left: 196 197
        on right: 181 202 205 206
    logic_expression <sym> (150)
        on left: 198
        on right: 199 200 203 204
    selection_statement <lists> (151)
        on left: 199 200 201
        on right: 182
    logic_expression_statement <sym> (152)
        on left: 202
        on right: 205
    iteration_statement <lists> (153)
        on left: 203 204 205 206
        on right: 183
    jump_statement <lists> (154)
        on left: 207 208 209 210 211
        on right: 184
    translation_unit (155)
        on left: 212 213
        on right: 0 213
    external_declaration (156)
        on left: 214 215
        on right: 212 213
    function_definition (157)
        on left: 216 218 219 221
        on right: 214
    $@4 (158)
        on left: 217
        on right: 218
    $@5 (159)
        on left: 220
        on right: 221


State 0

    0 $accept: • translation_unit $end
   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  212 translation_unit: • external_declaration
  213                 | • translation_unit external_declaration
  214 external_declaration: • function_definition
  215                     | • declaration
  216 function_definition: • declaration_specifiers declarator declaration_list compound_statement
  218                    | • declaration_specifiers declarator $@4 compound_statement
  219                    | • declarator declaration_list compound_statement
  221                    | • declarator $@5 compound_statement

    IDENTIFIER  shift, and go to state 1
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    declaration                go to state 24
    declaration_specifiers     go to state 25
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    declarator                 go to state 32
    direct_declarator          go to state 33
    pointer                    go to state 34
    translation_unit           go to state 35
    external_declaration       go to state 36
    function_definition        go to state 37


State 1

  136 direct_declarator: IDENTIFIER •

    $default  reduce using rule 136 (direct_declarator)


State 2

  107 type_specifier: TYPE_NAME •

    $default  reduce using rule 107 (type_specifier)


State 3

   91 storage_class_specifier: TYPEDEF •

    $default  reduce using rule 91 (storage_class_specifier)


State 4

   92 storage_class_specifier: EXTERN •

    $default  reduce using rule 92 (storage_class_specifier)


State 5

   93 storage_class_specifier: STATIC •

    $default  reduce using rule 93 (storage_class_specifier)


State 6

   94 storage_class_specifier: AUTO •

    $default  reduce using rule 94 (storage_class_specifier)


State 7

   95 storage_class_specifier: REGISTER •

    $default  reduce using rule 95 (storage_class_specifier)


State 8

   97 type_specifier: CHAR •

    $default  reduce using rule 97 (type_specifier)


State 9

   98 type_specifier: SHORT •

    $default  reduce using rule 98 (type_specifier)


State 10

   99 type_specifier: INT •

    $default  reduce using rule 99 (type_specifier)


State 11

  100 type_specifier: LONG •

    $default  reduce using rule 100 (type_specifier)


State 12

  103 type_specifier: SIGNED •

    $default  reduce using rule 103 (type_specifier)


State 13

  104 type_specifier: UNSIGNED •

    $default  reduce using rule 104 (type_specifier)


State 14

  101 type_specifier: FLOAT •

    $default  reduce using rule 101 (type_specifier)


State 15

  102 type_specifier: DOUBLE •

    $default  reduce using rule 102 (type_specifier)


State 16

  132 type_qualifier: CONST •

    $default  reduce using rule 132 (type_qualifier)


State 17

  133 type_qualifier: VOLATILE •

    $default  reduce using rule 133 (type_qualifier)


State 18

   96 type_specifier: VOID •

    $default  reduce using rule 96 (type_specifier)


State 19

  111 struct_or_union: STRUCT •

    $default  reduce using rule 111 (struct_or_union)


State 20

  112 struct_or_union: UNION •

    $default  reduce using rule 112 (struct_or_union)


State 21

  125 enum_specifier: ENUM • '{' enumerator_list '}'
  126               | ENUM • IDENTIFIER '{' enumerator_list '}'
  127               | ENUM • IDENTIFIER

    IDENTIFIER  shift, and go to state 38
    '{'         shift, and go to state 39


State 22

  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  137                  | '(' • declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    declarator         go to state 40
    direct_declarator  go to state 33
    pointer            go to state 34


State 23

  132 type_qualifier: • CONST
  133               | • VOLATILE
  143 pointer: • '*'
  143        | '*' •  [IDENTIFIER, '(', ')', '[', ',']
  144        | • '*' type_qualifier_list
  144        | '*' • type_qualifier_list
  145        | • '*' pointer
  145        | '*' • pointer
  146        | • '*' type_qualifier_list pointer
  146        | '*' • type_qualifier_list pointer
  147 type_qualifier_list: • type_qualifier
  148                    | • type_qualifier_list type_qualifier

    CONST     shift, and go to state 16
    VOLATILE  shift, and go to state 17
    '*'       shift, and go to state 23

    $default  reduce using rule 143 (pointer)

    type_qualifier       go to state 41
    pointer              go to state 42
    type_qualifier_list  go to state 43


State 24

  215 external_declaration: declaration •

    $default  reduce using rule 215 (external_declaration)


State 25

   79 declaration: declaration_specifiers • ';'
   80            | declaration_specifiers • init_declarator_list ';'
   87 init_declarator_list: • init_declarator
   88                     | • init_declarator_list ',' init_declarator
   89 init_declarator: • declarator
   90                | • declarator '=' initializer
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  216 function_definition: declaration_specifiers • declarator declaration_list compound_statement
  218                    | declaration_specifiers • declarator $@4 compound_statement

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ';'         shift, and go to state 44

    init_declarator_list  go to state 45
    init_declarator       go to state 46
    declarator            go to state 47
    direct_declarator     go to state 33
    pointer               go to state 34


State 26

   81 declaration_specifiers: • storage_class_specifier
   81                       | storage_class_specifier •  [IDENTIFIER, '(', ')', '[', ',', '*', ';']
   82                       | • storage_class_specifier declaration_specifiers
   82                       | storage_class_specifier • declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 81 (declaration_specifiers)

    declaration_specifiers     go to state 48
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31


State 27

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   83                       | type_specifier •  [IDENTIFIER, '(', ')', '[', ',', '*', ';']
   84                       | • type_specifier declaration_specifiers
   84                       | type_specifier • declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 83 (declaration_specifiers)

    declaration_specifiers     go to state 49
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31


State 28

  105 type_specifier: struct_or_union_specifier •

    $default  reduce using rule 105 (type_specifier)


State 29

  108 struct_or_union_specifier: struct_or_union • IDENTIFIER '{' struct_declaration_list '}'
  109                          | struct_or_union • '{' struct_declaration_list '}'
  110                          | struct_or_union • IDENTIFIER

    IDENTIFIER  shift, and go to state 50
    '{'         shift, and go to state 51


State 30

  106 type_specifier: enum_specifier •

    $default  reduce using rule 106 (type_specifier)


State 31

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   85                       | type_qualifier •  [IDENTIFIER, '(', ')', '[', ',', '*', ';']
   86                       | • type_qualifier declaration_specifiers
   86                       | type_qualifier • declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 85 (declaration_specifiers)

    declaration_specifiers     go to state 52
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31


State 32

   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  192 declaration_list: • declaration
  193                 | • declaration_list declaration
  219 function_definition: declarator • declaration_list compound_statement
  220 $@5: ε •  ['{']
  221 function_definition: declarator • $@5 compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 220 ($@5)

    declaration                go to state 53
    declaration_specifiers     go to state 54
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    declaration_list           go to state 55
    $@5                        go to state 56


State 33

  135 declarator: direct_declarator •  [TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ')', ',', ':', '=', ';', '{']
  138 direct_declarator: direct_declarator • '[' constant_expression ']'
  139                  | direct_declarator • '[' ']'
  140                  | direct_declarator • '(' parameter_type_list ')'
  141                  | direct_declarator • '(' identifier_list ')'
  142                  | direct_declarator • '(' ')'

    '('  shift, and go to state 57
    '['  shift, and go to state 58

    $default  reduce using rule 135 (declarator)


State 34

  134 declarator: pointer • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22

    direct_declarator  go to state 59


State 35

    0 $accept: translation_unit • $end
   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  213 translation_unit: translation_unit • external_declaration
  214 external_declaration: • function_definition
  215                     | • declaration
  216 function_definition: • declaration_specifiers declarator declaration_list compound_statement
  218                    | • declaration_specifiers declarator $@4 compound_statement
  219                    | • declarator declaration_list compound_statement
  221                    | • declarator $@5 compound_statement

    $end        shift, and go to state 60
    IDENTIFIER  shift, and go to state 1
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    declaration                go to state 24
    declaration_specifiers     go to state 25
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    declarator                 go to state 32
    direct_declarator          go to state 33
    pointer                    go to state 34
    external_declaration       go to state 61
    function_definition        go to state 37


State 36

  212 translation_unit: external_declaration •

    $default  reduce using rule 212 (translation_unit)


State 37

  214 external_declaration: function_definition •

    $default  reduce using rule 214 (external_declaration)


State 38

  126 enum_specifier: ENUM IDENTIFIER • '{' enumerator_list '}'
  127               | ENUM IDENTIFIER •  [IDENTIFIER, TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, '(', ')', '[', ',', '*', ':', ';']

    '{'  shift, and go to state 62

    $default  reduce using rule 127 (enum_specifier)


State 39

  125 enum_specifier: ENUM '{' • enumerator_list '}'
  128 enumerator_list: • enumerator
  129                | • enumerator_list ',' enumerator
  130 enumerator: • IDENTIFIER
  131           | • IDENTIFIER '=' constant_expression

    IDENTIFIER  shift, and go to state 63

    enumerator_list  go to state 64
    enumerator       go to state 65


State 40

  137 direct_declarator: '(' declarator • ')'

    ')'  shift, and go to state 66


State 41

  147 type_qualifier_list: type_qualifier •

    $default  reduce using rule 147 (type_qualifier_list)


State 42

  145 pointer: '*' pointer •

    $default  reduce using rule 145 (pointer)


State 43

  132 type_qualifier: • CONST
  133               | • VOLATILE
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  144        | '*' type_qualifier_list •  [IDENTIFIER, '(', ')', '[', ',']
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  146        | '*' type_qualifier_list • pointer
  148 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST     shift, and go to state 16
    VOLATILE  shift, and go to state 17
    '*'       shift, and go to state 23

    $default  reduce using rule 144 (pointer)

    type_qualifier  go to state 67
    pointer         go to state 68


State 44

   79 declaration: declaration_specifiers ';' •

    $default  reduce using rule 79 (declaration)


State 45

   80 declaration: declaration_specifiers init_declarator_list • ';'
   88 init_declarator_list: init_declarator_list • ',' init_declarator

    ','  shift, and go to state 69
    ';'  shift, and go to state 70


State 46

   87 init_declarator_list: init_declarator •

    $default  reduce using rule 87 (init_declarator_list)


State 47

   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   89 init_declarator: declarator •  [',', ';']
   90                | declarator • '=' initializer
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  192 declaration_list: • declaration
  193                 | • declaration_list declaration
  216 function_definition: declaration_specifiers declarator • declaration_list compound_statement
  217 $@4: ε •  ['{']
  218 function_definition: declaration_specifiers declarator • $@4 compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '='        shift, and go to state 71

    '{'       reduce using rule 217 ($@4)
    $default  reduce using rule 89 (init_declarator)

    declaration                go to state 53
    declaration_specifiers     go to state 54
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    declaration_list           go to state 72
    $@4                        go to state 73


State 48

   82 declaration_specifiers: storage_class_specifier declaration_specifiers •

    $default  reduce using rule 82 (declaration_specifiers)


State 49

   84 declaration_specifiers: type_specifier declaration_specifiers •

    $default  reduce using rule 84 (declaration_specifiers)


State 50

  108 struct_or_union_specifier: struct_or_union IDENTIFIER • '{' struct_declaration_list '}'
  110                          | struct_or_union IDENTIFIER •  [IDENTIFIER, TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, '(', ')', '[', ',', '*', ':', ';']

    '{'  shift, and go to state 74

    $default  reduce using rule 110 (struct_or_union_specifier)


State 51

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  109                          | struct_or_union '{' • struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  113 struct_declaration_list: • struct_declaration
  114                        | • struct_declaration_list struct_declaration
  115 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration_list    go to state 76
    struct_declaration         go to state 77
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 52

   86 declaration_specifiers: type_qualifier declaration_specifiers •

    $default  reduce using rule 86 (declaration_specifiers)


State 53

  192 declaration_list: declaration •

    $default  reduce using rule 192 (declaration_list)


State 54

   79 declaration: declaration_specifiers • ';'
   80            | declaration_specifiers • init_declarator_list ';'
   87 init_declarator_list: • init_declarator
   88                     | • init_declarator_list ',' init_declarator
   89 init_declarator: • declarator
   90                | • declarator '=' initializer
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ';'         shift, and go to state 44

    init_declarator_list  go to state 45
    init_declarator       go to state 46
    declarator            go to state 80
    direct_declarator     go to state 33
    pointer               go to state 34


State 55

   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  188 compound_statement: • '{' '}'
  189                   | • '{' statement_list '}'
  190                   | • '{' declaration_list '}'
  191                   | • '{' declaration_list statement_list '}'
  193 declaration_list: declaration_list • declaration
  219 function_definition: declarator declaration_list • compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '{'        shift, and go to state 81

    declaration                go to state 82
    declaration_specifiers     go to state 54
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    compound_statement         go to state 83


State 56

  188 compound_statement: • '{' '}'
  189                   | • '{' statement_list '}'
  190                   | • '{' declaration_list '}'
  191                   | • '{' declaration_list statement_list '}'
  221 function_definition: declarator $@5 • compound_statement

    '{'  shift, and go to state 81

    compound_statement  go to state 84


State 57

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  140 direct_declarator: direct_declarator '(' • parameter_type_list ')'
  141                  | direct_declarator '(' • identifier_list ')'
  142                  | direct_declarator '(' • ')'
  149 parameter_type_list: • parameter_list
  150                    | • parameter_list ',' ELLIPSIS
  151 parameter_list: • parameter_declaration
  152               | • parameter_list ',' parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers abstract_declarator
  155                      | • declaration_specifiers
  156 identifier_list: • IDENTIFIER
  157                | • identifier_list ',' IDENTIFIER

    IDENTIFIER  shift, and go to state 85
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    ')'         shift, and go to state 86

    declaration_specifiers     go to state 87
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    parameter_type_list        go to state 88
    parameter_list             go to state 89
    parameter_declaration      go to state 90
    identifier_list            go to state 91


State 58

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  138 direct_declarator: direct_declarator '[' • constant_expression ']'
  139                  | direct_declarator '[' • ']'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    ']'             shift, and go to state 99
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 122


State 59

  134 declarator: pointer direct_declarator •  [TYPE_NAME, TYPEDEF, EXTERN, STATIC, AUTO, REGISTER, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ')', ',', ':', '=', ';', '{']
  138 direct_declarator: direct_declarator • '[' constant_expression ']'
  139                  | direct_declarator • '[' ']'
  140                  | direct_declarator • '(' parameter_type_list ')'
  141                  | direct_declarator • '(' identifier_list ')'
  142                  | direct_declarator • '(' ')'

    '('  shift, and go to state 57
    '['  shift, and go to state 58

    $default  reduce using rule 134 (declarator)


State 60

    0 $accept: translation_unit $end •

    $default  accept


State 61

  213 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 213 (translation_unit)


State 62

  126 enum_specifier: ENUM IDENTIFIER '{' • enumerator_list '}'
  128 enumerator_list: • enumerator
  129                | • enumerator_list ',' enumerator
  130 enumerator: • IDENTIFIER
  131           | • IDENTIFIER '=' constant_expression

    IDENTIFIER  shift, and go to state 63

    enumerator_list  go to state 123
    enumerator       go to state 65


State 63

  130 enumerator: IDENTIFIER •  [',', '}']
  131           | IDENTIFIER • '=' constant_expression

    '='  shift, and go to state 124

    $default  reduce using rule 130 (enumerator)


State 64

  125 enum_specifier: ENUM '{' enumerator_list • '}'
  129 enumerator_list: enumerator_list • ',' enumerator

    ','  shift, and go to state 125
    '}'  shift, and go to state 126


State 65

  128 enumerator_list: enumerator •

    $default  reduce using rule 128 (enumerator_list)


State 66

  137 direct_declarator: '(' declarator ')' •

    $default  reduce using rule 137 (direct_declarator)


State 67

  148 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 148 (type_qualifier_list)


State 68

  146 pointer: '*' type_qualifier_list pointer •

    $default  reduce using rule 146 (pointer)


State 69

   88 init_declarator_list: init_declarator_list ',' • init_declarator
   89 init_declarator: • declarator
   90                | • declarator '=' initializer
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23

    init_declarator    go to state 127
    declarator         go to state 80
    direct_declarator  go to state 33
    pointer            go to state 34


State 70

   80 declaration: declaration_specifiers init_declarator_list ';' •

    $default  reduce using rule 80 (declaration)


State 71

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   90 init_declarator: declarator '=' • initializer
  172 initializer: • assignment_expression
  173            | • '{' initializer_list '}'
  174            | • '{' initializer_list ',' '}'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    '{'             shift, and go to state 128

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 131
    initializer                go to state 132


State 72

   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  188 compound_statement: • '{' '}'
  189                   | • '{' statement_list '}'
  190                   | • '{' declaration_list '}'
  191                   | • '{' declaration_list statement_list '}'
  193 declaration_list: declaration_list • declaration
  216 function_definition: declaration_specifiers declarator declaration_list • compound_statement

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '{'        shift, and go to state 81

    declaration                go to state 82
    declaration_specifiers     go to state 54
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    compound_statement         go to state 133


State 73

  188 compound_statement: • '{' '}'
  189                   | • '{' statement_list '}'
  190                   | • '{' declaration_list '}'
  191                   | • '{' declaration_list statement_list '}'
  218 function_definition: declaration_specifiers declarator $@4 • compound_statement

    '{'  shift, and go to state 81

    compound_statement  go to state 134


State 74

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  108                          | struct_or_union IDENTIFIER '{' • struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  113 struct_declaration_list: • struct_declaration
  114                        | • struct_declaration_list struct_declaration
  115 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration_list    go to state 135
    struct_declaration         go to state 77
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 75

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  116                         | type_specifier • specifier_qualifier_list
  117                         | • type_specifier
  117                         | type_specifier •  [IDENTIFIER, '(', ')', '[', '*', ':']
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 117 (specifier_qualifier_list)

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 136
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 76

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  109                          | struct_or_union '{' struct_declaration_list • '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  114 struct_declaration_list: struct_declaration_list • struct_declaration
  115 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '}'        shift, and go to state 137

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration         go to state 138
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 77

  113 struct_declaration_list: struct_declaration •

    $default  reduce using rule 113 (struct_declaration_list)


State 78

  115 struct_declaration: specifier_qualifier_list • struct_declarator_list ';'
  120 struct_declarator_list: • struct_declarator
  121                       | • struct_declarator_list ',' struct_declarator
  122 struct_declarator: • declarator
  123                  | • ':' constant_expression
  124                  | • declarator ':' constant_expression
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ':'         shift, and go to state 139

    struct_declarator_list  go to state 140
    struct_declarator       go to state 141
    declarator              go to state 142
    direct_declarator       go to state 33
    pointer                 go to state 34


State 79

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  118                         | type_qualifier • specifier_qualifier_list
  119                         | • type_qualifier
  119                         | type_qualifier •  [IDENTIFIER, '(', ')', '[', '*', ':']
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21

    $default  reduce using rule 119 (specifier_qualifier_list)

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 143
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 80

   89 init_declarator: declarator •  [',', ';']
   90                | declarator • '=' initializer

    '='  shift, and go to state 71

    $default  reduce using rule 89 (init_declarator)


State 81

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  188 compound_statement: '{' • '}'
  189                   | '{' • statement_list '}'
  190                   | '{' • declaration_list '}'
  191                   | '{' • declaration_list statement_list '}'
  192 declaration_list: • declaration
  193                 | • declaration_list declaration
  194 statement_list: • statement
  195               | • statement_list N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    TYPE_NAME       shift, and go to state 2
    TYPEDEF         shift, and go to state 3
    EXTERN          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    REGISTER        shift, and go to state 7
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156
    '}'             shift, and go to state 157

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    declaration                go to state 53
    declaration_specifiers     go to state 54
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    P                          go to state 160
    statement                  go to state 161
    labeled_statement          go to state 162
    declaration_list           go to state 163
    statement_list             go to state 164
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 82

  193 declaration_list: declaration_list declaration •

    $default  reduce using rule 193 (declaration_list)


State 83

  219 function_definition: declarator declaration_list compound_statement •

    $default  reduce using rule 219 (function_definition)


State 84

  221 function_definition: declarator $@5 compound_statement •

    $default  reduce using rule 221 (function_definition)


State 85

  156 identifier_list: IDENTIFIER •

    $default  reduce using rule 156 (identifier_list)


State 86

  142 direct_declarator: direct_declarator '(' ')' •

    $default  reduce using rule 142 (direct_declarator)


State 87

  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  153 parameter_declaration: declaration_specifiers • declarator
  154                      | declaration_specifiers • abstract_declarator
  155                      | declaration_specifiers •  [')', ',']
  160 abstract_declarator: • pointer
  161                    | • direct_abstract_declarator
  162                    | • pointer direct_abstract_declarator
  163 direct_abstract_declarator: • '(' abstract_declarator ')'
  164                           | • '[' ']'
  165                           | • '[' constant_expression ']'
  166                           | • direct_abstract_declarator '[' ']'
  167                           | • direct_abstract_declarator '[' constant_expression ']'
  168                           | • '(' ')'
  169                           | • '(' parameter_type_list ')'
  170                           | • direct_abstract_declarator '(' ')'
  171                           | • direct_abstract_declarator '(' parameter_type_list ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 169
    '['         shift, and go to state 170
    '*'         shift, and go to state 23

    $default  reduce using rule 155 (parameter_declaration)

    declarator                  go to state 171
    direct_declarator           go to state 33
    pointer                     go to state 172
    abstract_declarator         go to state 173
    direct_abstract_declarator  go to state 174


State 88

  140 direct_declarator: direct_declarator '(' parameter_type_list • ')'

    ')'  shift, and go to state 175


State 89

  149 parameter_type_list: parameter_list •  [')']
  150                    | parameter_list • ',' ELLIPSIS
  152 parameter_list: parameter_list • ',' parameter_declaration

    ','  shift, and go to state 176

    $default  reduce using rule 149 (parameter_type_list)


State 90

  151 parameter_list: parameter_declaration •

    $default  reduce using rule 151 (parameter_list)


State 91

  141 direct_declarator: direct_declarator '(' identifier_list • ')'
  157 identifier_list: identifier_list • ',' IDENTIFIER

    ')'  shift, and go to state 177
    ','  shift, and go to state 178


State 92

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 93

    2 primary_expression: CONSTANT •

    $default  reduce using rule 2 (primary_expression)


State 94

    3 primary_expression: STRING_LITERAL •

    $default  reduce using rule 3 (primary_expression)


State 95

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   19                 | SIZEOF • unary_expression
   20                 | • SIZEOF '(' type_name ')'
   20                 | SIZEOF • '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 179
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 180
    unary_operator      go to state 109


State 96

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   16                 | INC_OP • unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 181
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 182
    unary_operator      go to state 109


State 97

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   17                 | DEC_OP • unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 181
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 183
    unary_operator      go to state 109


State 98

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    4                   | '(' • expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   28                | '(' • type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  158 type_name: • specifier_qualifier_list
  159          | • specifier_qualifier_list abstract_declarator

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    TYPE_NAME       shift, and go to state 2
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 184
    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 185
    enum_specifier             go to state 30
    type_qualifier             go to state 79
    type_name                  go to state 186


State 99

  139 direct_declarator: direct_declarator '[' ']' •

    $default  reduce using rule 139 (direct_declarator)


State 100

   21 unary_operator: '&' •

    $default  reduce using rule 21 (unary_operator)


State 101

   22 unary_operator: '*' •

    $default  reduce using rule 22 (unary_operator)


State 102

   23 unary_operator: '+' •

    $default  reduce using rule 23 (unary_operator)


State 103

   24 unary_operator: '-' •

    $default  reduce using rule 24 (unary_operator)


State 104

   25 unary_operator: '~' •

    $default  reduce using rule 25 (unary_operator)


State 105

   26 unary_operator: '!' •

    $default  reduce using rule 26 (unary_operator)


State 106

    5 postfix_expression: primary_expression •

    $default  reduce using rule 5 (postfix_expression)


State 107

    6 postfix_expression: postfix_expression • '[' expression ']'
    7                   | postfix_expression • '(' ')'
    8                   | postfix_expression • '(' argument_expression_list ')'
    9                   | postfix_expression • '.' IDENTIFIER
   10                   | postfix_expression • PTR_OP IDENTIFIER
   11                   | postfix_expression • INC_OP
   12                   | postfix_expression • DEC_OP
   15 unary_expression: postfix_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, ')', ']', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', ':', '=', ';', '}']

    PTR_OP  shift, and go to state 187
    INC_OP  shift, and go to state 188
    DEC_OP  shift, and go to state 189
    '('     shift, and go to state 190
    '['     shift, and go to state 191
    '.'     shift, and go to state 192

    $default  reduce using rule 15 (unary_expression)


State 108

   27 cast_expression: unary_expression •

    $default  reduce using rule 27 (cast_expression)


State 109

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   18                 | unary_operator • cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 108
    unary_operator      go to state 109
    cast_expression     go to state 193


State 110

   29 multiplicative_expression: cast_expression •

    $default  reduce using rule 29 (multiplicative_expression)


State 111

   30 multiplicative_expression: multiplicative_expression • '*' cast_expression
   31                          | multiplicative_expression • '/' cast_expression
   32                          | multiplicative_expression • '%' cast_expression
   33 additive_expression: multiplicative_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':', ';', '}']

    '*'  shift, and go to state 194
    '/'  shift, and go to state 195
    '%'  shift, and go to state 196

    $default  reduce using rule 33 (additive_expression)


State 112

   34 additive_expression: additive_expression • '+' multiplicative_expression
   35                    | additive_expression • '-' multiplicative_expression
   36 shift_expression: additive_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    '+'  shift, and go to state 197
    '-'  shift, and go to state 198

    $default  reduce using rule 36 (shift_expression)


State 113

   37 shift_expression: shift_expression • LEFT_OP additive_expression
   38                 | shift_expression • RIGHT_OP additive_expression
   39 relational_expression: shift_expression •  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 199
    RIGHT_OP  shift, and go to state 200

    $default  reduce using rule 39 (relational_expression)


State 114

   40 relational_expression: relational_expression • '<' shift_expression
   41                      | relational_expression • '>' shift_expression
   42                      | relational_expression • LE_OP shift_expression
   43                      | relational_expression • GE_OP shift_expression
   44 equality_expression: relational_expression •  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    LE_OP  shift, and go to state 201
    GE_OP  shift, and go to state 202
    '<'    shift, and go to state 203
    '>'    shift, and go to state 204

    $default  reduce using rule 44 (equality_expression)


State 115

   45 equality_expression: equality_expression • EQ_OP relational_expression
   46                    | equality_expression • NE_OP relational_expression
   47 and_expression: equality_expression •  [AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    EQ_OP  shift, and go to state 205
    NE_OP  shift, and go to state 206

    $default  reduce using rule 47 (and_expression)


State 116

   48 and_expression: and_expression • '&' equality_expression
   49 exclusive_or_expression: and_expression •  [AND_OP, OR_OP, ')', ']', ',', '^', '|', '?', ':', ';', '}']

    '&'  shift, and go to state 207

    $default  reduce using rule 49 (exclusive_or_expression)


State 117

   50 exclusive_or_expression: exclusive_or_expression • '^' and_expression
   51 inclusive_or_expression: exclusive_or_expression •  [AND_OP, OR_OP, ')', ']', ',', '|', '?', ':', ';', '}']

    '^'  shift, and go to state 208

    $default  reduce using rule 51 (inclusive_or_expression)


State 118

   52 inclusive_or_expression: inclusive_or_expression • '|' exclusive_or_expression
   54 logical_and_expression: inclusive_or_expression •  [AND_OP, OR_OP, ')', ']', ',', '?', ':', ';', '}']

    '|'  shift, and go to state 209

    $default  reduce using rule 54 (logical_and_expression)


State 119

   55 logical_and_expression: logical_and_expression • AND_OP N inclusive_or_expression
   56 logical_or_expression: logical_and_expression •  [OR_OP, ')', ']', ',', '?', ':', ';', '}']

    AND_OP  shift, and go to state 210

    $default  reduce using rule 56 (logical_or_expression)


State 120

   57 logical_or_expression: logical_or_expression • OR_OP N logical_and_expression
   59 conditional_expression: logical_or_expression •  [')', ']', ',', ':', ';', '}']
   60 $@1: ε •  ['?']
   62 conditional_expression: logical_or_expression • $@1 '?' N expression ':' $@2 M N conditional_expression

    OR_OP  shift, and go to state 211

    '?'       reduce using rule 60 ($@1)
    $default  reduce using rule 59 (conditional_expression)

    $@1  go to state 212


State 121

   78 constant_expression: conditional_expression •

    $default  reduce using rule 78 (constant_expression)


State 122

  138 direct_declarator: direct_declarator '[' constant_expression • ']'

    ']'  shift, and go to state 213


State 123

  126 enum_specifier: ENUM IDENTIFIER '{' enumerator_list • '}'
  129 enumerator_list: enumerator_list • ',' enumerator

    ','  shift, and go to state 125
    '}'  shift, and go to state 214


State 124

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  131 enumerator: IDENTIFIER '=' • constant_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 215


State 125

  129 enumerator_list: enumerator_list ',' • enumerator
  130 enumerator: • IDENTIFIER
  131           | • IDENTIFIER '=' constant_expression

    IDENTIFIER  shift, and go to state 63

    enumerator  go to state 216


State 126

  125 enum_specifier: ENUM '{' enumerator_list '}' •

    $default  reduce using rule 125 (enum_specifier)


State 127

   88 init_declarator_list: init_declarator_list ',' init_declarator •

    $default  reduce using rule 88 (init_declarator_list)


State 128

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
  172 initializer: • assignment_expression
  173            | • '{' initializer_list '}'
  173            | '{' • initializer_list '}'
  174            | • '{' initializer_list ',' '}'
  174            | '{' • initializer_list ',' '}'
  175 initializer_list: • initializer
  176                 | • initializer_list ',' initializer

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    '{'             shift, and go to state 128

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 131
    initializer                go to state 217
    initializer_list           go to state 218


State 129

   27 cast_expression: unary_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', ':', ';', '}']
   64 assignment_expression: unary_expression • assignment_operator assignment_expression
   65 assignment_operator: • '='
   66                    | • MUL_ASSIGN
   67                    | • DIV_ASSIGN
   68                    | • MOD_ASSIGN
   69                    | • ADD_ASSIGN
   70                    | • SUB_ASSIGN
   71                    | • LEFT_ASSIGN
   72                    | • RIGHT_ASSIGN
   73                    | • AND_ASSIGN
   74                    | • XOR_ASSIGN
   75                    | • OR_ASSIGN

    MUL_ASSIGN    shift, and go to state 219
    DIV_ASSIGN    shift, and go to state 220
    MOD_ASSIGN    shift, and go to state 221
    ADD_ASSIGN    shift, and go to state 222
    SUB_ASSIGN    shift, and go to state 223
    LEFT_ASSIGN   shift, and go to state 224
    RIGHT_ASSIGN  shift, and go to state 225
    AND_ASSIGN    shift, and go to state 226
    XOR_ASSIGN    shift, and go to state 227
    OR_ASSIGN     shift, and go to state 228
    '='           shift, and go to state 229

    $default  reduce using rule 27 (cast_expression)

    assignment_operator  go to state 230


State 130

   63 assignment_expression: conditional_expression •

    $default  reduce using rule 63 (assignment_expression)


State 131

  172 initializer: assignment_expression •

    $default  reduce using rule 172 (initializer)


State 132

   90 init_declarator: declarator '=' initializer •

    $default  reduce using rule 90 (init_declarator)


State 133

  216 function_definition: declaration_specifiers declarator declaration_list compound_statement •

    $default  reduce using rule 216 (function_definition)


State 134

  218 function_definition: declaration_specifiers declarator $@4 compound_statement •

    $default  reduce using rule 218 (function_definition)


State 135

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  108                          | struct_or_union IDENTIFIER '{' struct_declaration_list • '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  114 struct_declaration_list: struct_declaration_list • struct_declaration
  115 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE

    TYPE_NAME  shift, and go to state 2
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '}'        shift, and go to state 231

    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    struct_declaration         go to state 138
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 30
    type_qualifier             go to state 79


State 136

  116 specifier_qualifier_list: type_specifier specifier_qualifier_list •

    $default  reduce using rule 116 (specifier_qualifier_list)


State 137

  109 struct_or_union_specifier: struct_or_union '{' struct_declaration_list '}' •

    $default  reduce using rule 109 (struct_or_union_specifier)


State 138

  114 struct_declaration_list: struct_declaration_list struct_declaration •

    $default  reduce using rule 114 (struct_declaration_list)


State 139

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  123 struct_declarator: ':' • constant_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 232


State 140

  115 struct_declaration: specifier_qualifier_list struct_declarator_list • ';'
  121 struct_declarator_list: struct_declarator_list • ',' struct_declarator

    ','  shift, and go to state 233
    ';'  shift, and go to state 234


State 141

  120 struct_declarator_list: struct_declarator •

    $default  reduce using rule 120 (struct_declarator_list)


State 142

  122 struct_declarator: declarator •  [',', ';']
  124                  | declarator • ':' constant_expression

    ':'  shift, and go to state 235

    $default  reduce using rule 122 (struct_declarator)


State 143

  118 specifier_qualifier_list: type_qualifier specifier_qualifier_list •

    $default  reduce using rule 118 (specifier_qualifier_list)


State 144

    1 primary_expression: IDENTIFIER •  [PTR_OP, INC_OP, DEC_OP, LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, '(', '[', '.', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', '=', ';']
  185 labeled_statement: IDENTIFIER • ':' N statement

    ':'  shift, and go to state 236

    $default  reduce using rule 1 (primary_expression)


State 145

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  186 labeled_statement: CASE • constant_expression ':' N statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 237


State 146

  187 labeled_statement: DEFAULT • ':' N statement

    ':'  shift, and go to state 238


State 147

  199 selection_statement: IF • '(' logic_expression ')' N statement
  200                    | IF • '(' logic_expression ')' N statement ELSE M N statement

    '('  shift, and go to state 239


State 148

  201 selection_statement: SWITCH • '(' expression ')' M statement

    '('  shift, and go to state 240


State 149

   53 N: ε •
  203 iteration_statement: WHILE • N '(' logic_expression ')' N statement

    $default  reduce using rule 53 (N)

    N  go to state 241


State 150

   53 N: ε •
  204 iteration_statement: DO • N statement WHILE N '(' logic_expression ')' ';'

    $default  reduce using rule 53 (N)

    N  go to state 242


State 151

  205 iteration_statement: FOR • '(' expression_statement N logic_expression_statement N ')' statement
  206                    | FOR • '(' expression_statement N expression_statement N expression ')' M N statement

    '('  shift, and go to state 243


State 152

  207 jump_statement: GOTO • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 244


State 153

  208 jump_statement: CONTINUE • ';'

    ';'  shift, and go to state 245


State 154

  209 jump_statement: BREAK • ';'

    ';'  shift, and go to state 246


State 155

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  210 jump_statement: RETURN • ';'
  211               | RETURN • expression ';'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 247

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 248


State 156

  196 expression_statement: ';' •

    $default  reduce using rule 196 (expression_statement)


State 157

  188 compound_statement: '{' '}' •

    $default  reduce using rule 188 (compound_statement)


State 158

   76 expression: assignment_expression •

    $default  reduce using rule 76 (expression)


State 159

   77 expression: expression • ',' assignment_expression
  197 expression_statement: expression • ';'

    ','  shift, and go to state 249
    ';'  shift, and go to state 250


State 160

  179 $@3: ε •
  180 statement: P • $@3 compound_statement

    $default  reduce using rule 179 ($@3)

    $@3  go to state 251


State 161

  194 statement_list: statement •

    $default  reduce using rule 194 (statement_list)


State 162

  178 statement: labeled_statement •

    $default  reduce using rule 178 (statement)


State 163

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
   79 declaration: • declaration_specifiers ';'
   80            | • declaration_specifiers init_declarator_list ';'
   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  190 compound_statement: '{' declaration_list • '}'
  191                   | '{' declaration_list • statement_list '}'
  193 declaration_list: declaration_list • declaration
  194 statement_list: • statement
  195               | • statement_list N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    TYPE_NAME       shift, and go to state 2
    TYPEDEF         shift, and go to state 3
    EXTERN          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    REGISTER        shift, and go to state 7
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156
    '}'             shift, and go to state 252

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    declaration                go to state 82
    declaration_specifiers     go to state 54
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    P                          go to state 160
    statement                  go to state 161
    labeled_statement          go to state 162
    statement_list             go to state 253
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 164

   53 N: ε •  [IDENTIFIER, CONSTANT, STRING_LITERAL, SIZEOF, INC_OP, DEC_OP, CASE, DEFAULT, IF, SWITCH, WHILE, DO, FOR, GOTO, CONTINUE, BREAK, RETURN, '(', '&', '*', '+', '-', '~', '!', ';', '{']
  189 compound_statement: '{' statement_list • '}'
  195 statement_list: statement_list • N statement

    '}'  shift, and go to state 254

    $default  reduce using rule 53 (N)

    N  go to state 255


State 165

  181 statement: expression_statement •

    $default  reduce using rule 181 (statement)


State 166

  182 statement: selection_statement •

    $default  reduce using rule 182 (statement)


State 167

  183 statement: iteration_statement •

    $default  reduce using rule 183 (statement)


State 168

  184 statement: jump_statement •

    $default  reduce using rule 184 (statement)


State 169

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  137                  | '(' • declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  149 parameter_type_list: • parameter_list
  150                    | • parameter_list ',' ELLIPSIS
  151 parameter_list: • parameter_declaration
  152               | • parameter_list ',' parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers abstract_declarator
  155                      | • declaration_specifiers
  160 abstract_declarator: • pointer
  161                    | • direct_abstract_declarator
  162                    | • pointer direct_abstract_declarator
  163 direct_abstract_declarator: • '(' abstract_declarator ')'
  163                           | '(' • abstract_declarator ')'
  164                           | • '[' ']'
  165                           | • '[' constant_expression ']'
  166                           | • direct_abstract_declarator '[' ']'
  167                           | • direct_abstract_declarator '[' constant_expression ']'
  168                           | • '(' ')'
  168                           | '(' • ')'
  169                           | • '(' parameter_type_list ')'
  169                           | '(' • parameter_type_list ')'
  170                           | • direct_abstract_declarator '(' ')'
  171                           | • direct_abstract_declarator '(' parameter_type_list ')'

    IDENTIFIER  shift, and go to state 1
    TYPE_NAME   shift, and go to state 2
    TYPEDEF     shift, and go to state 3
    EXTERN      shift, and go to state 4
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    REGISTER    shift, and go to state 7
    CHAR        shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    SIGNED      shift, and go to state 12
    UNSIGNED    shift, and go to state 13
    FLOAT       shift, and go to state 14
    DOUBLE      shift, and go to state 15
    CONST       shift, and go to state 16
    VOLATILE    shift, and go to state 17
    VOID        shift, and go to state 18
    STRUCT      shift, and go to state 19
    UNION       shift, and go to state 20
    ENUM        shift, and go to state 21
    '('         shift, and go to state 169
    ')'         shift, and go to state 256
    '['         shift, and go to state 170
    '*'         shift, and go to state 23

    declaration_specifiers      go to state 87
    storage_class_specifier     go to state 26
    type_specifier              go to state 27
    struct_or_union_specifier   go to state 28
    struct_or_union             go to state 29
    enum_specifier              go to state 30
    type_qualifier              go to state 31
    declarator                  go to state 40
    direct_declarator           go to state 33
    pointer                     go to state 172
    parameter_type_list         go to state 257
    parameter_list              go to state 89
    parameter_declaration       go to state 90
    abstract_declarator         go to state 258
    direct_abstract_declarator  go to state 174


State 170

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  164 direct_abstract_declarator: '[' • ']'
  165                           | '[' • constant_expression ']'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    ']'             shift, and go to state 259
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 260


State 171

  153 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 153 (parameter_declaration)


State 172

  134 declarator: pointer • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  160 abstract_declarator: pointer •  [')', ',']
  162                    | pointer • direct_abstract_declarator
  163 direct_abstract_declarator: • '(' abstract_declarator ')'
  164                           | • '[' ']'
  165                           | • '[' constant_expression ']'
  166                           | • direct_abstract_declarator '[' ']'
  167                           | • direct_abstract_declarator '[' constant_expression ']'
  168                           | • '(' ')'
  169                           | • '(' parameter_type_list ')'
  170                           | • direct_abstract_declarator '(' ')'
  171                           | • direct_abstract_declarator '(' parameter_type_list ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 169
    '['         shift, and go to state 170

    $default  reduce using rule 160 (abstract_declarator)

    direct_declarator           go to state 59
    direct_abstract_declarator  go to state 261


State 173

  154 parameter_declaration: declaration_specifiers abstract_declarator •

    $default  reduce using rule 154 (parameter_declaration)


State 174

  161 abstract_declarator: direct_abstract_declarator •  [')', ',']
  166 direct_abstract_declarator: direct_abstract_declarator • '[' ']'
  167                           | direct_abstract_declarator • '[' constant_expression ']'
  170                           | direct_abstract_declarator • '(' ')'
  171                           | direct_abstract_declarator • '(' parameter_type_list ')'

    '('  shift, and go to state 262
    '['  shift, and go to state 263

    $default  reduce using rule 161 (abstract_declarator)


State 175

  140 direct_declarator: direct_declarator '(' parameter_type_list ')' •

    $default  reduce using rule 140 (direct_declarator)


State 176

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  150 parameter_type_list: parameter_list ',' • ELLIPSIS
  152 parameter_list: parameter_list ',' • parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers abstract_declarator
  155                      | • declaration_specifiers

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    ELLIPSIS   shift, and go to state 264

    declaration_specifiers     go to state 87
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    parameter_declaration      go to state 265


State 177

  141 direct_declarator: direct_declarator '(' identifier_list ')' •

    $default  reduce using rule 141 (direct_declarator)


State 178

  157 identifier_list: identifier_list ',' • IDENTIFIER

    IDENTIFIER  shift, and go to state 266


State 179

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    4                   | '(' • expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   20                 | SIZEOF '(' • type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  116 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  117                         | • type_specifier
  118                         | • type_qualifier specifier_qualifier_list
  119                         | • type_qualifier
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  158 type_name: • specifier_qualifier_list
  159          | • specifier_qualifier_list abstract_declarator

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    TYPE_NAME       shift, and go to state 2
    CHAR            shift, and go to state 8
    SHORT           shift, and go to state 9
    INT             shift, and go to state 10
    LONG            shift, and go to state 11
    SIGNED          shift, and go to state 12
    UNSIGNED        shift, and go to state 13
    FLOAT           shift, and go to state 14
    DOUBLE          shift, and go to state 15
    CONST           shift, and go to state 16
    VOLATILE        shift, and go to state 17
    VOID            shift, and go to state 18
    STRUCT          shift, and go to state 19
    UNION           shift, and go to state 20
    ENUM            shift, and go to state 21
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 184
    type_specifier             go to state 75
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    specifier_qualifier_list   go to state 185
    enum_specifier             go to state 30
    type_qualifier             go to state 79
    type_name                  go to state 267


State 180

   19 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 19 (unary_expression)


State 181

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    4                   | '(' • expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 184


State 182

   16 unary_expression: INC_OP unary_expression •

    $default  reduce using rule 16 (unary_expression)


State 183

   17 unary_expression: DEC_OP unary_expression •

    $default  reduce using rule 17 (unary_expression)


State 184

    4 primary_expression: '(' expression • ')'
   77 expression: expression • ',' assignment_expression

    ')'  shift, and go to state 268
    ','  shift, and go to state 249


State 185

  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  158 type_name: specifier_qualifier_list •  [')']
  159          | specifier_qualifier_list • abstract_declarator
  160 abstract_declarator: • pointer
  161                    | • direct_abstract_declarator
  162                    | • pointer direct_abstract_declarator
  163 direct_abstract_declarator: • '(' abstract_declarator ')'
  164                           | • '[' ']'
  165                           | • '[' constant_expression ']'
  166                           | • direct_abstract_declarator '[' ']'
  167                           | • direct_abstract_declarator '[' constant_expression ']'
  168                           | • '(' ')'
  169                           | • '(' parameter_type_list ')'
  170                           | • direct_abstract_declarator '(' ')'
  171                           | • direct_abstract_declarator '(' parameter_type_list ')'

    '('  shift, and go to state 269
    '['  shift, and go to state 170
    '*'  shift, and go to state 23

    $default  reduce using rule 158 (type_name)

    pointer                     go to state 270
    abstract_declarator         go to state 271
    direct_abstract_declarator  go to state 174


State 186

   28 cast_expression: '(' type_name • ')' cast_expression

    ')'  shift, and go to state 272


State 187

   10 postfix_expression: postfix_expression PTR_OP • IDENTIFIER

    IDENTIFIER  shift, and go to state 273


State 188

   11 postfix_expression: postfix_expression INC_OP •

    $default  reduce using rule 11 (postfix_expression)


State 189

   12 postfix_expression: postfix_expression DEC_OP •

    $default  reduce using rule 12 (postfix_expression)


State 190

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    7                   | postfix_expression '(' • ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    8                   | postfix_expression '(' • argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   13 argument_expression_list: • assignment_expression
   14                         | • argument_expression_list ',' assignment_expression
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    ')'             shift, and go to state 274
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    argument_expression_list   go to state 275
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 276


State 191

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    6                   | postfix_expression '[' • expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 277


State 192

    9 postfix_expression: postfix_expression '.' • IDENTIFIER

    IDENTIFIER  shift, and go to state 278


State 193

   18 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 18 (unary_expression)


State 194

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   30 multiplicative_expression: multiplicative_expression '*' • cast_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 108
    unary_operator      go to state 109
    cast_expression     go to state 279


State 195

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   31 multiplicative_expression: multiplicative_expression '/' • cast_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 108
    unary_operator      go to state 109
    cast_expression     go to state 280


State 196

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   32 multiplicative_expression: multiplicative_expression '%' • cast_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 108
    unary_operator      go to state 109
    cast_expression     go to state 281


State 197

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   34 additive_expression: additive_expression '+' • multiplicative_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 282


State 198

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   35 additive_expression: additive_expression '-' • multiplicative_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 283


State 199

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   37 shift_expression: shift_expression LEFT_OP • additive_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 284


State 200

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   38 shift_expression: shift_expression RIGHT_OP • additive_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 285


State 201

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   42 relational_expression: relational_expression LE_OP • shift_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 286


State 202

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   43 relational_expression: relational_expression GE_OP • shift_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 287


State 203

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   40 relational_expression: relational_expression '<' • shift_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 288


State 204

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   41 relational_expression: relational_expression '>' • shift_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 289


State 205

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   45 equality_expression: equality_expression EQ_OP • relational_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 290


State 206

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   46 equality_expression: equality_expression NE_OP • relational_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 291


State 207

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   48 and_expression: and_expression '&' • equality_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 292


State 208

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   50 exclusive_or_expression: exclusive_or_expression '^' • and_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 293


State 209

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   52 inclusive_or_expression: inclusive_or_expression '|' • exclusive_or_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 294


State 210

   53 N: ε •
   55 logical_and_expression: logical_and_expression AND_OP • N inclusive_or_expression

    $default  reduce using rule 53 (N)

    N  go to state 295


State 211

   53 N: ε •
   57 logical_or_expression: logical_or_expression OR_OP • N logical_and_expression

    $default  reduce using rule 53 (N)

    N  go to state 296


State 212

   62 conditional_expression: logical_or_expression $@1 • '?' N expression ':' $@2 M N conditional_expression

    '?'  shift, and go to state 297


State 213

  138 direct_declarator: direct_declarator '[' constant_expression ']' •

    $default  reduce using rule 138 (direct_declarator)


State 214

  126 enum_specifier: ENUM IDENTIFIER '{' enumerator_list '}' •

    $default  reduce using rule 126 (enum_specifier)


State 215

  131 enumerator: IDENTIFIER '=' constant_expression •

    $default  reduce using rule 131 (enumerator)


State 216

  129 enumerator_list: enumerator_list ',' enumerator •

    $default  reduce using rule 129 (enumerator_list)


State 217

  175 initializer_list: initializer •

    $default  reduce using rule 175 (initializer_list)


State 218

  173 initializer: '{' initializer_list • '}'
  174            | '{' initializer_list • ',' '}'
  176 initializer_list: initializer_list • ',' initializer

    ','  shift, and go to state 298
    '}'  shift, and go to state 299


State 219

   66 assignment_operator: MUL_ASSIGN •

    $default  reduce using rule 66 (assignment_operator)


State 220

   67 assignment_operator: DIV_ASSIGN •

    $default  reduce using rule 67 (assignment_operator)


State 221

   68 assignment_operator: MOD_ASSIGN •

    $default  reduce using rule 68 (assignment_operator)


State 222

   69 assignment_operator: ADD_ASSIGN •

    $default  reduce using rule 69 (assignment_operator)


State 223

   70 assignment_operator: SUB_ASSIGN •

    $default  reduce using rule 70 (assignment_operator)


State 224

   71 assignment_operator: LEFT_ASSIGN •

    $default  reduce using rule 71 (assignment_operator)


State 225

   72 assignment_operator: RIGHT_ASSIGN •

    $default  reduce using rule 72 (assignment_operator)


State 226

   73 assignment_operator: AND_ASSIGN •

    $default  reduce using rule 73 (assignment_operator)


State 227

   74 assignment_operator: XOR_ASSIGN •

    $default  reduce using rule 74 (assignment_operator)


State 228

   75 assignment_operator: OR_ASSIGN •

    $default  reduce using rule 75 (assignment_operator)


State 229

   65 assignment_operator: '=' •

    $default  reduce using rule 65 (assignment_operator)


State 230

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   64                      | unary_expression assignment_operator • assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 300


State 231

  108 struct_or_union_specifier: struct_or_union IDENTIFIER '{' struct_declaration_list '}' •

    $default  reduce using rule 108 (struct_or_union_specifier)


State 232

  123 struct_declarator: ':' constant_expression •

    $default  reduce using rule 123 (struct_declarator)


State 233

  121 struct_declarator_list: struct_declarator_list ',' • struct_declarator
  122 struct_declarator: • declarator
  123                  | • ':' constant_expression
  124                  | • declarator ':' constant_expression
  134 declarator: • pointer direct_declarator
  135           | • direct_declarator
  136 direct_declarator: • IDENTIFIER
  137                  | • '(' declarator ')'
  138                  | • direct_declarator '[' constant_expression ']'
  139                  | • direct_declarator '[' ']'
  140                  | • direct_declarator '(' parameter_type_list ')'
  141                  | • direct_declarator '(' identifier_list ')'
  142                  | • direct_declarator '(' ')'
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 22
    '*'         shift, and go to state 23
    ':'         shift, and go to state 139

    struct_declarator  go to state 301
    declarator         go to state 142
    direct_declarator  go to state 33
    pointer            go to state 34


State 234

  115 struct_declaration: specifier_qualifier_list struct_declarator_list ';' •

    $default  reduce using rule 115 (struct_declaration)


State 235

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  124 struct_declarator: declarator ':' • constant_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 302


State 236

   53 N: ε •
  185 labeled_statement: IDENTIFIER ':' • N statement

    $default  reduce using rule 53 (N)

    N  go to state 303


State 237

  186 labeled_statement: CASE constant_expression • ':' N statement

    ':'  shift, and go to state 304


State 238

   53 N: ε •
  187 labeled_statement: DEFAULT ':' • N statement

    $default  reduce using rule 53 (N)

    N  go to state 305


State 239

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  198 logic_expression: • expression
  199 selection_statement: IF '(' • logic_expression ')' N statement
  200                    | IF '(' • logic_expression ')' N statement ELSE M N statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 306
    logic_expression           go to state 307


State 240

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  201 selection_statement: SWITCH '(' • expression ')' M statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 308


State 241

  203 iteration_statement: WHILE N • '(' logic_expression ')' N statement

    '('  shift, and go to state 309


State 242

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  204                    | DO N • statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 310
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 243

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  196 expression_statement: • ';'
  197                     | • expression ';'
  205 iteration_statement: FOR '(' • expression_statement N logic_expression_statement N ')' statement
  206                    | FOR '(' • expression_statement N expression_statement N expression ')' M N statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    expression_statement       go to state 311


State 244

  207 jump_statement: GOTO IDENTIFIER • ';'

    ';'  shift, and go to state 312


State 245

  208 jump_statement: CONTINUE ';' •

    $default  reduce using rule 208 (jump_statement)


State 246

  209 jump_statement: BREAK ';' •

    $default  reduce using rule 209 (jump_statement)


State 247

  210 jump_statement: RETURN ';' •

    $default  reduce using rule 210 (jump_statement)


State 248

   77 expression: expression • ',' assignment_expression
  211 jump_statement: RETURN expression • ';'

    ','  shift, and go to state 249
    ';'  shift, and go to state 313


State 249

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   77 expression: expression ',' • assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 314


State 250

  197 expression_statement: expression ';' •

    $default  reduce using rule 197 (expression_statement)


State 251

  180 statement: P $@3 • compound_statement
  188 compound_statement: • '{' '}'
  189                   | • '{' statement_list '}'
  190                   | • '{' declaration_list '}'
  191                   | • '{' declaration_list statement_list '}'

    '{'  shift, and go to state 81

    compound_statement  go to state 315


State 252

  190 compound_statement: '{' declaration_list '}' •

    $default  reduce using rule 190 (compound_statement)


State 253

   53 N: ε •  [IDENTIFIER, CONSTANT, STRING_LITERAL, SIZEOF, INC_OP, DEC_OP, CASE, DEFAULT, IF, SWITCH, WHILE, DO, FOR, GOTO, CONTINUE, BREAK, RETURN, '(', '&', '*', '+', '-', '~', '!', ';', '{']
  191 compound_statement: '{' declaration_list statement_list • '}'
  195 statement_list: statement_list • N statement

    '}'  shift, and go to state 316

    $default  reduce using rule 53 (N)

    N  go to state 255


State 254

  189 compound_statement: '{' statement_list '}' •

    $default  reduce using rule 189 (compound_statement)


State 255

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  195 statement_list: statement_list N • statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 317
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 256

  168 direct_abstract_declarator: '(' ')' •

    $default  reduce using rule 168 (direct_abstract_declarator)


State 257

  169 direct_abstract_declarator: '(' parameter_type_list • ')'

    ')'  shift, and go to state 318


State 258

  163 direct_abstract_declarator: '(' abstract_declarator • ')'

    ')'  shift, and go to state 319


State 259

  164 direct_abstract_declarator: '[' ']' •

    $default  reduce using rule 164 (direct_abstract_declarator)


State 260

  165 direct_abstract_declarator: '[' constant_expression • ']'

    ']'  shift, and go to state 320


State 261

  162 abstract_declarator: pointer direct_abstract_declarator •  [')', ',']
  166 direct_abstract_declarator: direct_abstract_declarator • '[' ']'
  167                           | direct_abstract_declarator • '[' constant_expression ']'
  170                           | direct_abstract_declarator • '(' ')'
  171                           | direct_abstract_declarator • '(' parameter_type_list ')'

    '('  shift, and go to state 262
    '['  shift, and go to state 263

    $default  reduce using rule 162 (abstract_declarator)


State 262

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  149 parameter_type_list: • parameter_list
  150                    | • parameter_list ',' ELLIPSIS
  151 parameter_list: • parameter_declaration
  152               | • parameter_list ',' parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers abstract_declarator
  155                      | • declaration_specifiers
  170 direct_abstract_declarator: direct_abstract_declarator '(' • ')'
  171                           | direct_abstract_declarator '(' • parameter_type_list ')'

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    ')'        shift, and go to state 321

    declaration_specifiers     go to state 87
    storage_class_specifier    go to state 26
    type_specifier             go to state 27
    struct_or_union_specifier  go to state 28
    struct_or_union            go to state 29
    enum_specifier             go to state 30
    type_qualifier             go to state 31
    parameter_type_list        go to state 322
    parameter_list             go to state 89
    parameter_declaration      go to state 90


State 263

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   78 constant_expression: • conditional_expression
  166 direct_abstract_declarator: direct_abstract_declarator '[' • ']'
  167                           | direct_abstract_declarator '[' • constant_expression ']'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    ']'             shift, and go to state 323
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 121
    constant_expression        go to state 324


State 264

  150 parameter_type_list: parameter_list ',' ELLIPSIS •

    $default  reduce using rule 150 (parameter_type_list)


State 265

  152 parameter_list: parameter_list ',' parameter_declaration •

    $default  reduce using rule 152 (parameter_list)


State 266

  157 identifier_list: identifier_list ',' IDENTIFIER •

    $default  reduce using rule 157 (identifier_list)


State 267

   20 unary_expression: SIZEOF '(' type_name • ')'

    ')'  shift, and go to state 325


State 268

    4 primary_expression: '(' expression ')' •

    $default  reduce using rule 4 (primary_expression)


State 269

   81 declaration_specifiers: • storage_class_specifier
   82                       | • storage_class_specifier declaration_specifiers
   83                       | • type_specifier
   84                       | • type_specifier declaration_specifiers
   85                       | • type_qualifier
   86                       | • type_qualifier declaration_specifiers
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • struct_or_union_specifier
  106               | • enum_specifier
  107               | • TYPE_NAME
  108 struct_or_union_specifier: • struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  109                          | • struct_or_union '{' struct_declaration_list '}'
  110                          | • struct_or_union IDENTIFIER
  111 struct_or_union: • STRUCT
  112                | • UNION
  125 enum_specifier: • ENUM '{' enumerator_list '}'
  126               | • ENUM IDENTIFIER '{' enumerator_list '}'
  127               | • ENUM IDENTIFIER
  132 type_qualifier: • CONST
  133               | • VOLATILE
  143 pointer: • '*'
  144        | • '*' type_qualifier_list
  145        | • '*' pointer
  146        | • '*' type_qualifier_list pointer
  149 parameter_type_list: • parameter_list
  150                    | • parameter_list ',' ELLIPSIS
  151 parameter_list: • parameter_declaration
  152               | • parameter_list ',' parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers abstract_declarator
  155                      | • declaration_specifiers
  160 abstract_declarator: • pointer
  161                    | • direct_abstract_declarator
  162                    | • pointer direct_abstract_declarator
  163 direct_abstract_declarator: • '(' abstract_declarator ')'
  163                           | '(' • abstract_declarator ')'
  164                           | • '[' ']'
  165                           | • '[' constant_expression ']'
  166                           | • direct_abstract_declarator '[' ']'
  167                           | • direct_abstract_declarator '[' constant_expression ']'
  168                           | • '(' ')'
  168                           | '(' • ')'
  169                           | • '(' parameter_type_list ')'
  169                           | '(' • parameter_type_list ')'
  170                           | • direct_abstract_declarator '(' ')'
  171                           | • direct_abstract_declarator '(' parameter_type_list ')'

    TYPE_NAME  shift, and go to state 2
    TYPEDEF    shift, and go to state 3
    EXTERN     shift, and go to state 4
    STATIC     shift, and go to state 5
    AUTO       shift, and go to state 6
    REGISTER   shift, and go to state 7
    CHAR       shift, and go to state 8
    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    SIGNED     shift, and go to state 12
    UNSIGNED   shift, and go to state 13
    FLOAT      shift, and go to state 14
    DOUBLE     shift, and go to state 15
    CONST      shift, and go to state 16
    VOLATILE   shift, and go to state 17
    VOID       shift, and go to state 18
    STRUCT     shift, and go to state 19
    UNION      shift, and go to state 20
    ENUM       shift, and go to state 21
    '('        shift, and go to state 269
    ')'        shift, and go to state 256
    '['        shift, and go to state 170
    '*'        shift, and go to state 23

    declaration_specifiers      go to state 87
    storage_class_specifier     go to state 26
    type_specifier              go to state 27
    struct_or_union_specifier   go to state 28
    struct_or_union             go to state 29
    enum_specifier              go to state 30
    type_qualifier              go to state 31
    pointer                     go to state 270
    parameter_type_list         go to state 257
    parameter_list              go to state 89
    parameter_declaration       go to state 90
    abstract_declarator         go to state 258
    direct_abstract_declarator  go to state 174


State 270

  160 abstract_declarator: pointer •  [')']
  162                    | pointer • direct_abstract_declarator
  163 direct_abstract_declarator: • '(' abstract_declarator ')'
  164                           | • '[' ']'
  165                           | • '[' constant_expression ']'
  166                           | • direct_abstract_declarator '[' ']'
  167                           | • direct_abstract_declarator '[' constant_expression ']'
  168                           | • '(' ')'
  169                           | • '(' parameter_type_list ')'
  170                           | • direct_abstract_declarator '(' ')'
  171                           | • direct_abstract_declarator '(' parameter_type_list ')'

    '('  shift, and go to state 269
    '['  shift, and go to state 170

    $default  reduce using rule 160 (abstract_declarator)

    direct_abstract_declarator  go to state 261


State 271

  159 type_name: specifier_qualifier_list abstract_declarator •

    $default  reduce using rule 159 (type_name)


State 272

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   28                | '(' type_name ')' • cast_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression  go to state 106
    postfix_expression  go to state 107
    unary_expression    go to state 108
    unary_operator      go to state 109
    cast_expression     go to state 326


State 273

   10 postfix_expression: postfix_expression PTR_OP IDENTIFIER •

    $default  reduce using rule 10 (postfix_expression)


State 274

    7 postfix_expression: postfix_expression '(' ')' •

    $default  reduce using rule 7 (postfix_expression)


State 275

    8 postfix_expression: postfix_expression '(' argument_expression_list • ')'
   14 argument_expression_list: argument_expression_list • ',' assignment_expression

    ')'  shift, and go to state 327
    ','  shift, and go to state 328


State 276

   13 argument_expression_list: assignment_expression •

    $default  reduce using rule 13 (argument_expression_list)


State 277

    6 postfix_expression: postfix_expression '[' expression • ']'
   77 expression: expression • ',' assignment_expression

    ']'  shift, and go to state 329
    ','  shift, and go to state 249


State 278

    9 postfix_expression: postfix_expression '.' IDENTIFIER •

    $default  reduce using rule 9 (postfix_expression)


State 279

   30 multiplicative_expression: multiplicative_expression '*' cast_expression •

    $default  reduce using rule 30 (multiplicative_expression)


State 280

   31 multiplicative_expression: multiplicative_expression '/' cast_expression •

    $default  reduce using rule 31 (multiplicative_expression)


State 281

   32 multiplicative_expression: multiplicative_expression '%' cast_expression •

    $default  reduce using rule 32 (multiplicative_expression)


State 282

   30 multiplicative_expression: multiplicative_expression • '*' cast_expression
   31                          | multiplicative_expression • '/' cast_expression
   32                          | multiplicative_expression • '%' cast_expression
   34 additive_expression: additive_expression '+' multiplicative_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':', ';', '}']

    '*'  shift, and go to state 194
    '/'  shift, and go to state 195
    '%'  shift, and go to state 196

    $default  reduce using rule 34 (additive_expression)


State 283

   30 multiplicative_expression: multiplicative_expression • '*' cast_expression
   31                          | multiplicative_expression • '/' cast_expression
   32                          | multiplicative_expression • '%' cast_expression
   35 additive_expression: additive_expression '-' multiplicative_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':', ';', '}']

    '*'  shift, and go to state 194
    '/'  shift, and go to state 195
    '%'  shift, and go to state 196

    $default  reduce using rule 35 (additive_expression)


State 284

   34 additive_expression: additive_expression • '+' multiplicative_expression
   35                    | additive_expression • '-' multiplicative_expression
   37 shift_expression: shift_expression LEFT_OP additive_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    '+'  shift, and go to state 197
    '-'  shift, and go to state 198

    $default  reduce using rule 37 (shift_expression)


State 285

   34 additive_expression: additive_expression • '+' multiplicative_expression
   35                    | additive_expression • '-' multiplicative_expression
   38 shift_expression: shift_expression RIGHT_OP additive_expression •  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    '+'  shift, and go to state 197
    '-'  shift, and go to state 198

    $default  reduce using rule 38 (shift_expression)


State 286

   37 shift_expression: shift_expression • LEFT_OP additive_expression
   38                 | shift_expression • RIGHT_OP additive_expression
   42 relational_expression: relational_expression LE_OP shift_expression •  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 199
    RIGHT_OP  shift, and go to state 200

    $default  reduce using rule 42 (relational_expression)


State 287

   37 shift_expression: shift_expression • LEFT_OP additive_expression
   38                 | shift_expression • RIGHT_OP additive_expression
   43 relational_expression: relational_expression GE_OP shift_expression •  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 199
    RIGHT_OP  shift, and go to state 200

    $default  reduce using rule 43 (relational_expression)


State 288

   37 shift_expression: shift_expression • LEFT_OP additive_expression
   38                 | shift_expression • RIGHT_OP additive_expression
   40 relational_expression: relational_expression '<' shift_expression •  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 199
    RIGHT_OP  shift, and go to state 200

    $default  reduce using rule 40 (relational_expression)


State 289

   37 shift_expression: shift_expression • LEFT_OP additive_expression
   38                 | shift_expression • RIGHT_OP additive_expression
   41 relational_expression: relational_expression '>' shift_expression •  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', '?', ':', ';', '}']

    LEFT_OP   shift, and go to state 199
    RIGHT_OP  shift, and go to state 200

    $default  reduce using rule 41 (relational_expression)


State 290

   40 relational_expression: relational_expression • '<' shift_expression
   41                      | relational_expression • '>' shift_expression
   42                      | relational_expression • LE_OP shift_expression
   43                      | relational_expression • GE_OP shift_expression
   45 equality_expression: equality_expression EQ_OP relational_expression •  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    LE_OP  shift, and go to state 201
    GE_OP  shift, and go to state 202
    '<'    shift, and go to state 203
    '>'    shift, and go to state 204

    $default  reduce using rule 45 (equality_expression)


State 291

   40 relational_expression: relational_expression • '<' shift_expression
   41                      | relational_expression • '>' shift_expression
   42                      | relational_expression • LE_OP shift_expression
   43                      | relational_expression • GE_OP shift_expression
   46 equality_expression: equality_expression NE_OP relational_expression •  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    LE_OP  shift, and go to state 201
    GE_OP  shift, and go to state 202
    '<'    shift, and go to state 203
    '>'    shift, and go to state 204

    $default  reduce using rule 46 (equality_expression)


State 292

   45 equality_expression: equality_expression • EQ_OP relational_expression
   46                    | equality_expression • NE_OP relational_expression
   48 and_expression: and_expression '&' equality_expression •  [AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', '?', ':', ';', '}']

    EQ_OP  shift, and go to state 205
    NE_OP  shift, and go to state 206

    $default  reduce using rule 48 (and_expression)


State 293

   48 and_expression: and_expression • '&' equality_expression
   50 exclusive_or_expression: exclusive_or_expression '^' and_expression •  [AND_OP, OR_OP, ')', ']', ',', '^', '|', '?', ':', ';', '}']

    '&'  shift, and go to state 207

    $default  reduce using rule 50 (exclusive_or_expression)


State 294

   50 exclusive_or_expression: exclusive_or_expression • '^' and_expression
   52 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression •  [AND_OP, OR_OP, ')', ']', ',', '|', '?', ':', ';', '}']

    '^'  shift, and go to state 208

    $default  reduce using rule 52 (inclusive_or_expression)


State 295

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   55 logical_and_expression: logical_and_expression AND_OP N • inclusive_or_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 330


State 296

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   57 logical_or_expression: logical_or_expression OR_OP N • logical_and_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 331


State 297

   53 N: ε •
   62 conditional_expression: logical_or_expression $@1 '?' • N expression ':' $@2 M N conditional_expression

    $default  reduce using rule 53 (N)

    N  go to state 332


State 298

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
  172 initializer: • assignment_expression
  173            | • '{' initializer_list '}'
  174            | • '{' initializer_list ',' '}'
  174            | '{' initializer_list ',' • '}'
  176 initializer_list: initializer_list ',' • initializer

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    '{'             shift, and go to state 128
    '}'             shift, and go to state 333

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 131
    initializer                go to state 334


State 299

  173 initializer: '{' initializer_list '}' •

    $default  reduce using rule 173 (initializer)


State 300

   64 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 64 (assignment_expression)


State 301

  121 struct_declarator_list: struct_declarator_list ',' struct_declarator •

    $default  reduce using rule 121 (struct_declarator_list)


State 302

  124 struct_declarator: declarator ':' constant_expression •

    $default  reduce using rule 124 (struct_declarator)


State 303

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  185                  | IDENTIFIER ':' N • statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 335
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 304

   53 N: ε •
  186 labeled_statement: CASE constant_expression ':' • N statement

    $default  reduce using rule 53 (N)

    N  go to state 336


State 305

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  187                  | DEFAULT ':' N • statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 337
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 306

   77 expression: expression • ',' assignment_expression
  198 logic_expression: expression •  [')']

    ','  shift, and go to state 249

    $default  reduce using rule 198 (logic_expression)


State 307

  199 selection_statement: IF '(' logic_expression • ')' N statement
  200                    | IF '(' logic_expression • ')' N statement ELSE M N statement

    ')'  shift, and go to state 338


State 308

   77 expression: expression • ',' assignment_expression
  201 selection_statement: SWITCH '(' expression • ')' M statement

    ')'  shift, and go to state 339
    ','  shift, and go to state 249


State 309

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  198 logic_expression: • expression
  203 iteration_statement: WHILE N '(' • logic_expression ')' N statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 306
    logic_expression           go to state 340


State 310

  204 iteration_statement: DO N statement • WHILE N '(' logic_expression ')' ';'

    WHILE  shift, and go to state 341


State 311

   53 N: ε •
  205 iteration_statement: FOR '(' expression_statement • N logic_expression_statement N ')' statement
  206                    | FOR '(' expression_statement • N expression_statement N expression ')' M N statement

    $default  reduce using rule 53 (N)

    N  go to state 342


State 312

  207 jump_statement: GOTO IDENTIFIER ';' •

    $default  reduce using rule 207 (jump_statement)


State 313

  211 jump_statement: RETURN expression ';' •

    $default  reduce using rule 211 (jump_statement)


State 314

   77 expression: expression ',' assignment_expression •

    $default  reduce using rule 77 (expression)


State 315

  180 statement: P $@3 compound_statement •

    $default  reduce using rule 180 (statement)


State 316

  191 compound_statement: '{' declaration_list statement_list '}' •

    $default  reduce using rule 191 (compound_statement)


State 317

  195 statement_list: statement_list N statement •

    $default  reduce using rule 195 (statement_list)


State 318

  169 direct_abstract_declarator: '(' parameter_type_list ')' •

    $default  reduce using rule 169 (direct_abstract_declarator)


State 319

  163 direct_abstract_declarator: '(' abstract_declarator ')' •

    $default  reduce using rule 163 (direct_abstract_declarator)


State 320

  165 direct_abstract_declarator: '[' constant_expression ']' •

    $default  reduce using rule 165 (direct_abstract_declarator)


State 321

  170 direct_abstract_declarator: direct_abstract_declarator '(' ')' •

    $default  reduce using rule 170 (direct_abstract_declarator)


State 322

  171 direct_abstract_declarator: direct_abstract_declarator '(' parameter_type_list • ')'

    ')'  shift, and go to state 343


State 323

  166 direct_abstract_declarator: direct_abstract_declarator '[' ']' •

    $default  reduce using rule 166 (direct_abstract_declarator)


State 324

  167 direct_abstract_declarator: direct_abstract_declarator '[' constant_expression • ']'

    ']'  shift, and go to state 344


State 325

   20 unary_expression: SIZEOF '(' type_name ')' •

    $default  reduce using rule 20 (unary_expression)


State 326

   28 cast_expression: '(' type_name ')' cast_expression •

    $default  reduce using rule 28 (cast_expression)


State 327

    8 postfix_expression: postfix_expression '(' argument_expression_list ')' •

    $default  reduce using rule 8 (postfix_expression)


State 328

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   14 argument_expression_list: argument_expression_list ',' • assignment_expression
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 345


State 329

    6 postfix_expression: postfix_expression '[' expression ']' •

    $default  reduce using rule 6 (postfix_expression)


State 330

   52 inclusive_or_expression: inclusive_or_expression • '|' exclusive_or_expression
   55 logical_and_expression: logical_and_expression AND_OP N inclusive_or_expression •  [AND_OP, OR_OP, ')', ']', ',', '?', ':', ';', '}']

    '|'  shift, and go to state 209

    $default  reduce using rule 55 (logical_and_expression)


State 331

   55 logical_and_expression: logical_and_expression • AND_OP N inclusive_or_expression
   57 logical_or_expression: logical_or_expression OR_OP N logical_and_expression •  [OR_OP, ')', ']', ',', '?', ':', ';', '}']

    AND_OP  shift, and go to state 210

    $default  reduce using rule 57 (logical_or_expression)


State 332

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   62                       | logical_or_expression $@1 '?' N • expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 346


State 333

  174 initializer: '{' initializer_list ',' '}' •

    $default  reduce using rule 174 (initializer)


State 334

  176 initializer_list: initializer_list ',' initializer •

    $default  reduce using rule 176 (initializer_list)


State 335

  185 labeled_statement: IDENTIFIER ':' N statement •

    $default  reduce using rule 185 (labeled_statement)


State 336

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  186                  | CASE constant_expression ':' N • statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 347
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 337

  187 labeled_statement: DEFAULT ':' N statement •

    $default  reduce using rule 187 (labeled_statement)


State 338

   53 N: ε •
  199 selection_statement: IF '(' logic_expression ')' • N statement
  200                    | IF '(' logic_expression ')' • N statement ELSE M N statement

    $default  reduce using rule 53 (N)

    N  go to state 348


State 339

   58 M: ε •
  201 selection_statement: SWITCH '(' expression ')' • M statement

    $default  reduce using rule 58 (M)

    M  go to state 349


State 340

  203 iteration_statement: WHILE N '(' logic_expression • ')' N statement

    ')'  shift, and go to state 350


State 341

   53 N: ε •
  204 iteration_statement: DO N statement WHILE • N '(' logic_expression ')' ';'

    $default  reduce using rule 53 (N)

    N  go to state 351


State 342

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  196 expression_statement: • ';'
  197                     | • expression ';'
  202 logic_expression_statement: • expression_statement
  205 iteration_statement: FOR '(' expression_statement N • logic_expression_statement N ')' statement
  206                    | FOR '(' expression_statement N • expression_statement N expression ')' M N statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    primary_expression          go to state 106
    postfix_expression          go to state 107
    unary_expression            go to state 129
    unary_operator              go to state 109
    cast_expression             go to state 110
    multiplicative_expression   go to state 111
    additive_expression         go to state 112
    shift_expression            go to state 113
    relational_expression       go to state 114
    equality_expression         go to state 115
    and_expression              go to state 116
    exclusive_or_expression     go to state 117
    inclusive_or_expression     go to state 118
    logical_and_expression      go to state 119
    logical_or_expression       go to state 120
    conditional_expression      go to state 130
    assignment_expression       go to state 158
    expression                  go to state 159
    expression_statement        go to state 352
    logic_expression_statement  go to state 353


State 343

  171 direct_abstract_declarator: direct_abstract_declarator '(' parameter_type_list ')' •

    $default  reduce using rule 171 (direct_abstract_declarator)


State 344

  167 direct_abstract_declarator: direct_abstract_declarator '[' constant_expression ']' •

    $default  reduce using rule 167 (direct_abstract_declarator)


State 345

   14 argument_expression_list: argument_expression_list ',' assignment_expression •

    $default  reduce using rule 14 (argument_expression_list)


State 346

   62 conditional_expression: logical_or_expression $@1 '?' N expression • ':' $@2 M N conditional_expression
   77 expression: expression • ',' assignment_expression

    ','  shift, and go to state 249
    ':'  shift, and go to state 354


State 347

  186 labeled_statement: CASE constant_expression ':' N statement •

    $default  reduce using rule 186 (labeled_statement)


State 348

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  199                    | IF '(' logic_expression ')' N • statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  200                    | IF '(' logic_expression ')' N • statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 355
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 349

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  201                    | SWITCH '(' expression ')' M • statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 356
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 350

   53 N: ε •
  203 iteration_statement: WHILE N '(' logic_expression ')' • N statement

    $default  reduce using rule 53 (N)

    N  go to state 357


State 351

  204 iteration_statement: DO N statement WHILE N • '(' logic_expression ')' ';'

    '('  shift, and go to state 358


State 352

   53 N: ε •  [IDENTIFIER, CONSTANT, STRING_LITERAL, SIZEOF, INC_OP, DEC_OP, '(', '&', '*', '+', '-', '~', '!']
  202 logic_expression_statement: expression_statement •  [')']
  206 iteration_statement: FOR '(' expression_statement N expression_statement • N expression ')' M N statement

    ')'       reduce using rule 202 (logic_expression_statement)
    $default  reduce using rule 53 (N)

    N  go to state 359


State 353

   53 N: ε •
  205 iteration_statement: FOR '(' expression_statement N logic_expression_statement • N ')' statement

    $default  reduce using rule 53 (N)

    N  go to state 360


State 354

   61 $@2: ε •
   62 conditional_expression: logical_or_expression $@1 '?' N expression ':' • $@2 M N conditional_expression

    $default  reduce using rule 61 ($@2)

    $@2  go to state 361


State 355

  199 selection_statement: IF '(' logic_expression ')' N statement •  [IDENTIFIER, CONSTANT, STRING_LITERAL, SIZEOF, INC_OP, DEC_OP, CASE, DEFAULT, IF, SWITCH, WHILE, DO, FOR, GOTO, CONTINUE, BREAK, RETURN, '(', '&', '*', '+', '-', '~', '!', ';', '{', '}']
  200                    | IF '(' logic_expression ')' N statement • ELSE M N statement

    ELSE  shift, and go to state 362

    $default  reduce using rule 199 (selection_statement)

    Conflict between rule 199 and token ELSE resolved as shift (NOELSE < ELSE).


State 356

  201 selection_statement: SWITCH '(' expression ')' M statement •

    $default  reduce using rule 201 (selection_statement)


State 357

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  203                    | WHILE N '(' logic_expression ')' N • statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 363
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 358

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  198 logic_expression: • expression
  204 iteration_statement: DO N statement WHILE N '(' • logic_expression ')' ';'

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 306
    logic_expression           go to state 364


State 359

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  206 iteration_statement: FOR '(' expression_statement N expression_statement N • expression ')' M N statement

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 365


State 360

  205 iteration_statement: FOR '(' expression_statement N logic_expression_statement N • ')' statement

    ')'  shift, and go to state 366


State 361

   58 M: ε •
   62 conditional_expression: logical_or_expression $@1 '?' N expression ':' $@2 • M N conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 367


State 362

   58 M: ε •
  200 selection_statement: IF '(' logic_expression ')' N statement ELSE • M N statement

    $default  reduce using rule 58 (M)

    M  go to state 368


State 363

  203 iteration_statement: WHILE N '(' logic_expression ')' N statement •

    $default  reduce using rule 203 (iteration_statement)


State 364

  204 iteration_statement: DO N statement WHILE N '(' logic_expression • ')' ';'

    ')'  shift, and go to state 369


State 365

   77 expression: expression • ',' assignment_expression
  206 iteration_statement: FOR '(' expression_statement N expression_statement N expression • ')' M N statement

    ')'  shift, and go to state 370
    ','  shift, and go to state 249


State 366

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  205                    | FOR '(' expression_statement N logic_expression_statement N ')' • statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 371
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 367

   53 N: ε •
   62 conditional_expression: logical_or_expression $@1 '?' N expression ':' $@2 M • N conditional_expression

    $default  reduce using rule 53 (N)

    N  go to state 372


State 368

   53 N: ε •
  200 selection_statement: IF '(' logic_expression ')' N statement ELSE M • N statement

    $default  reduce using rule 53 (N)

    N  go to state 373


State 369

  204 iteration_statement: DO N statement WHILE N '(' logic_expression ')' • ';'

    ';'  shift, and go to state 374


State 370

   58 M: ε •
  206 iteration_statement: FOR '(' expression_statement N expression_statement N expression ')' • M N statement

    $default  reduce using rule 58 (M)

    M  go to state 375


State 371

  205 iteration_statement: FOR '(' expression_statement N logic_expression_statement N ')' statement •

    $default  reduce using rule 205 (iteration_statement)


State 372

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   62                       | logical_or_expression $@1 '?' N expression ':' $@2 M N • conditional_expression

    IDENTIFIER      shift, and go to state 92
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 108
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 376


State 373

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  200                    | IF '(' logic_expression ')' N statement ELSE M N • statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 377
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 374

  204 iteration_statement: DO N statement WHILE N '(' logic_expression ')' ';' •

    $default  reduce using rule 204 (iteration_statement)


State 375

   53 N: ε •
  206 iteration_statement: FOR '(' expression_statement N expression_statement N expression ')' M • N statement

    $default  reduce using rule 53 (N)

    N  go to state 378


State 376

   62 conditional_expression: logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression •

    $default  reduce using rule 62 (conditional_expression)


State 377

  200 selection_statement: IF '(' logic_expression ')' N statement ELSE M N statement •

    $default  reduce using rule 200 (selection_statement)


State 378

    1 primary_expression: • IDENTIFIER
    2                   | • CONSTANT
    3                   | • STRING_LITERAL
    4                   | • '(' expression ')'
    5 postfix_expression: • primary_expression
    6                   | • postfix_expression '[' expression ']'
    7                   | • postfix_expression '(' ')'
    8                   | • postfix_expression '(' argument_expression_list ')'
    9                   | • postfix_expression '.' IDENTIFIER
   10                   | • postfix_expression PTR_OP IDENTIFIER
   11                   | • postfix_expression INC_OP
   12                   | • postfix_expression DEC_OP
   15 unary_expression: • postfix_expression
   16                 | • INC_OP unary_expression
   17                 | • DEC_OP unary_expression
   18                 | • unary_operator cast_expression
   19                 | • SIZEOF unary_expression
   20                 | • SIZEOF '(' type_name ')'
   21 unary_operator: • '&'
   22               | • '*'
   23               | • '+'
   24               | • '-'
   25               | • '~'
   26               | • '!'
   27 cast_expression: • unary_expression
   28                | • '(' type_name ')' cast_expression
   29 multiplicative_expression: • cast_expression
   30                          | • multiplicative_expression '*' cast_expression
   31                          | • multiplicative_expression '/' cast_expression
   32                          | • multiplicative_expression '%' cast_expression
   33 additive_expression: • multiplicative_expression
   34                    | • additive_expression '+' multiplicative_expression
   35                    | • additive_expression '-' multiplicative_expression
   36 shift_expression: • additive_expression
   37                 | • shift_expression LEFT_OP additive_expression
   38                 | • shift_expression RIGHT_OP additive_expression
   39 relational_expression: • shift_expression
   40                      | • relational_expression '<' shift_expression
   41                      | • relational_expression '>' shift_expression
   42                      | • relational_expression LE_OP shift_expression
   43                      | • relational_expression GE_OP shift_expression
   44 equality_expression: • relational_expression
   45                    | • equality_expression EQ_OP relational_expression
   46                    | • equality_expression NE_OP relational_expression
   47 and_expression: • equality_expression
   48               | • and_expression '&' equality_expression
   49 exclusive_or_expression: • and_expression
   50                        | • exclusive_or_expression '^' and_expression
   51 inclusive_or_expression: • exclusive_or_expression
   52                        | • inclusive_or_expression '|' exclusive_or_expression
   54 logical_and_expression: • inclusive_or_expression
   55                       | • logical_and_expression AND_OP N inclusive_or_expression
   56 logical_or_expression: • logical_and_expression
   57                      | • logical_or_expression OR_OP N logical_and_expression
   59 conditional_expression: • logical_or_expression
   62                       | • logical_or_expression $@1 '?' N expression ':' $@2 M N conditional_expression
   63 assignment_expression: • conditional_expression
   64                      | • unary_expression assignment_operator assignment_expression
   76 expression: • assignment_expression
   77           | • expression ',' assignment_expression
  177 P: ε •  ['{']
  178 statement: • labeled_statement
  180          | • P $@3 compound_statement
  181          | • expression_statement
  182          | • selection_statement
  183          | • iteration_statement
  184          | • jump_statement
  185 labeled_statement: • IDENTIFIER ':' N statement
  186                  | • CASE constant_expression ':' N statement
  187                  | • DEFAULT ':' N statement
  196 expression_statement: • ';'
  197                     | • expression ';'
  199 selection_statement: • IF '(' logic_expression ')' N statement
  200                    | • IF '(' logic_expression ')' N statement ELSE M N statement
  201                    | • SWITCH '(' expression ')' M statement
  203 iteration_statement: • WHILE N '(' logic_expression ')' N statement
  204                    | • DO N statement WHILE N '(' logic_expression ')' ';'
  205                    | • FOR '(' expression_statement N logic_expression_statement N ')' statement
  206                    | • FOR '(' expression_statement N expression_statement N expression ')' M N statement
  206                    | FOR '(' expression_statement N expression_statement N expression ')' M N • statement
  207 jump_statement: • GOTO IDENTIFIER ';'
  208               | • CONTINUE ';'
  209               | • BREAK ';'
  210               | • RETURN ';'
  211               | • RETURN expression ';'

    IDENTIFIER      shift, and go to state 144
    CONSTANT        shift, and go to state 93
    STRING_LITERAL  shift, and go to state 94
    SIZEOF          shift, and go to state 95
    INC_OP          shift, and go to state 96
    DEC_OP          shift, and go to state 97
    CASE            shift, and go to state 145
    DEFAULT         shift, and go to state 146
    IF              shift, and go to state 147
    SWITCH          shift, and go to state 148
    WHILE           shift, and go to state 149
    DO              shift, and go to state 150
    FOR             shift, and go to state 151
    GOTO            shift, and go to state 152
    CONTINUE        shift, and go to state 153
    BREAK           shift, and go to state 154
    RETURN          shift, and go to state 155
    '('             shift, and go to state 98
    '&'             shift, and go to state 100
    '*'             shift, and go to state 101
    '+'             shift, and go to state 102
    '-'             shift, and go to state 103
    '~'             shift, and go to state 104
    '!'             shift, and go to state 105
    ';'             shift, and go to state 156

    $default  reduce using rule 177 (P)

    primary_expression         go to state 106
    postfix_expression         go to state 107
    unary_expression           go to state 129
    unary_operator             go to state 109
    cast_expression            go to state 110
    multiplicative_expression  go to state 111
    additive_expression        go to state 112
    shift_expression           go to state 113
    relational_expression      go to state 114
    equality_expression        go to state 115
    and_expression             go to state 116
    exclusive_or_expression    go to state 117
    inclusive_or_expression    go to state 118
    logical_and_expression     go to state 119
    logical_or_expression      go to state 120
    conditional_expression     go to state 130
    assignment_expression      go to state 158
    expression                 go to state 159
    P                          go to state 160
    statement                  go to state 379
    labeled_statement          go to state 162
    expression_statement       go to state 165
    selection_statement        go to state 166
    iteration_statement        go to state 167
    jump_statement             go to state 168


State 379

  206 iteration_statement: FOR '(' expression_statement N expression_statement N expression ')' M N statement •

    $default  reduce using rule 206 (iteration_statement)
